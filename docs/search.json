[
  {
    "objectID": "day_1_basics_of_Rstudio.html",
    "href": "day_1_basics_of_Rstudio.html",
    "title": "Basics of Rstudio",
    "section": "",
    "text": "1 Rstudio\nTogether in groups of two or three explain the following to each other:\n\nWhat and where is the Console?\nWhat and where is the Script?\nWhat is the difference between writing 2+2in the console and the script?\nWhat happens if you write a # in the script??\nWhen and why can comments in your code be useful?\nWhat and where is the Environment Pane?\nWhat and where is the “Files, Help, Plots, Packages, and Viewer” Pane?\nWhat does F1 and ?[some_function] do?\nWhat is an R Project, and why is it a good idea to use?"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#section",
    "href": "day_1_basics_of_R_code.html#section",
    "title": "Basics of R code",
    "section": "1.1 <-",
    "text": "1.1 &lt;-\n\nDo you have a short cut for the assignment operator? (Tools -&gt; Show Command Palette -&gt; and type “assignment”)\nWhat does the assign operator &lt;- do?\n\n\n\nAssign the inbuilt datset iris to an object called my_data\niris is available to you when you load R. It´s an inbuilt dataset. So it is available to you even though you cant find it in the Environment pane. Just type iris.\n\n\nShow me the code\nmy_data &lt;- iris\n\n\n\n\n\nprint my_data\n\n\nShow me the code\nmy_data"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#c",
    "href": "day_1_basics_of_R_code.html#c",
    "title": "Basics of R code",
    "section": "1.2 c()",
    "text": "1.2 c()\nThe c is short for concatenate, and means to link together.\nThis function combines values into a vector or list. For now you can think of a vector as a sequence of values. The values are seperated by a ,\n\n\nUse c() to create a sequence of numbers from 0 to 4\n\n\nShow me the code\nc(0, 1, 2, 3, 4)\n\n\n\n\nUse c() to create a sequence of numbers from 0 to 4 in steps of 2\n\n\nShow me the code\nc(0, 2, 4)"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#seq",
    "href": "day_1_basics_of_R_code.html#seq",
    "title": "Basics of R code",
    "section": "1.3 seq()",
    "text": "1.3 seq()\nOf course, such predictable operations can be done with ease in a more reliable way. We will use the function seq() as an example. The output of this function is a sequence of numbers. The sequence of numbers is dictated by the arguments that you provide.\nRead the arguments section on help page for seq()\nType ?seq() in the console or type seq()and pres F1 while the cursor stands on the on the letters.\n\n\nMake a sequence of numbers that goes from 0 to 100\n\n\nShow me the code\nseq(from = 0,\n    to = 100)\n\n# This simple operation can also be done by just writing 0:100\n\n\n\n\n\nMake a sequence of numbers that goes from 0 to 100 in steps of 2\n\n\nShow me the code\nseq(from = 0,\n    to = 100,\n    by = 2)"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#sample",
    "href": "day_1_basics_of_R_code.html#sample",
    "title": "Basics of R code",
    "section": "1.4 sample()",
    "text": "1.4 sample()\n\nUsing sample(), take a sample of 5 random numbers between 1 and 100\n\n\nShow me the code\nsample(1:100, 5)\n\n\n\n\nWhat does the argument replace do? What is the default value?"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#mean",
    "href": "day_1_basics_of_R_code.html#mean",
    "title": "Basics of R code",
    "section": "1.5 mean()",
    "text": "1.5 mean()\nAnother function we can use is mean(). This function gives you the mean value of a sequence of numbers. Read the arguments section of the help page for mean()\n\n\nWhat type of input does the first arguments of the mean() function require?\n\n\nShow me the code\n# It requires a vector. \n# You can still think of this as a sequence of numbers\n# c()\n\n\n\n\n\nUsing c(), take the mean of the numbers 5, 3, 1, and 10\n\n\nShow me the code\nmean(c(5, 3, 1, 10))\n\n\n\n\n\nTake the mean of this vector c(2, 4, 6, NA)\n\n\nShow me the code\nmean(c(2, 4, 6, NA))\n\n\n\n\n\nTake the mean of this vector c(2, 4, 6, NA), disregarding NA values\n\n\n\n\n\n\nHint\n\n\n\n\n\nRead about the na.rm argument in the mean() function. What is the default value?\n\n\n\n\n\nShow me the code\nmean(c(2, 4, 6, NA),\n     na.rm = TRUE)\n\n\n\n\n\nYou will find the na.rm argument in many functions. It always defaults to FALSE. Discuss if this is a good idea? Is it different from other programs?"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#section-1",
    "href": "day_1_basics_of_R_code.html#section-1",
    "title": "Basics of R code",
    "section": "1.6 %>%",
    "text": "1.6 %&gt;%\n\nWhat is your keyboard shortcut to write the pipe %&gt;% ? (Pres CTRL+SHIFT+P and type pipe in the search field).\n\n\nLoad the tidyverse\nWhy? The %&lt;% is a part of the tidyverse, and is not included in Base R\n\nlibrary(tidyverse)\n\n\n\n\nUsing the pipe, create a sequence of numbers going from 0 til 100 and then take the mean of the sequence.\n\n\nShow me the code\nseq(from = 0,\n    to = 100) %&gt;%\n  mean()\n\n\n\n\n\nUsing the pipe, create a sequence of numbers going from 1 to 20 in 39 steps, and then sample 10 random numbers from the sequence\n\n\nShow me the code\nseq(from = 1,\n    to = 20,\n    length.out = 39) %&gt;% \n  sample(10)\n\n\n\n\n\nRewrite this code to use the pipe instead\n\nsort(\n  sample(seq(1:100),\n         10,\n         replace = TRUE)\n  )\n\n\n\nShow me the code\nseq(1:100) %&gt;% \n  sample(10,\n         replace = TRUE) %&gt;% \n  sort()"
  },
  {
    "objectID": "day_1_basics_of_R_code.html#explore",
    "href": "day_1_basics_of_R_code.html#explore",
    "title": "Basics of R code",
    "section": "1.7 Explore",
    "text": "1.7 Explore\nInvestigate the following functions that we may need later on in this course.\n\nquantile()\nrnorm()\nmedian()\n\ncumsum()\nmin()\n\nmax()\n\nn()\nset.seed()"
  },
  {
    "objectID": "day_1_dplyr.html#load-the-tidyverse-and-the-here-package",
    "href": "day_1_dplyr.html#load-the-tidyverse-and-the-here-package",
    "title": "dplyr",
    "section": "Load the tidyverse and the here package",
    "text": "Load the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)"
  },
  {
    "objectID": "day_1_dplyr.html#here",
    "href": "day_1_dplyr.html#here",
    "title": "dplyr",
    "section": "1.1 here()",
    "text": "1.1 here()\n\nTry out the here() function\n\nWhat happens if you write here() ?\nWhat happens if you write here(\"raw_data\") ?\n\nCompare your output with your neighbors.\nCompare your output with someone who has a different operating system (Windows, Mac, Linux) than you. (Hint: look for \\ /)\nDiscuss if and how the here()function could ever be of any use to anybody\n\n\n\n\n\nLoad the soldiers dataset\nUse the function read_csv2()\nThe file argument should be here(\"raw_data\", \"soldiers.csv\")\n\n\nShow the code\nread_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\n\n\n\n\nAssign the soldiers dataset to an object called soldiers\nGreat, now read the data again and assign it (remember &lt;-) to an object called soldiers\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))"
  },
  {
    "objectID": "day_1_dplyr.html#skim",
    "href": "day_1_dplyr.html#skim",
    "title": "dplyr",
    "section": "1.2 skim()",
    "text": "1.2 skim()\nThere are many ways to explore a dataframe. In this course we will take a shortcut and use the skim() function from the skimr package. The skim() function provides an exellent overview of a dataframe.\nLoad the skimr package and use the skim() function to get an impression of the soldiers dataset.\nDiscuss with your neighbor:\n\nNr of rows?\nNr of columns?\nMissing values?\nTypes of variables?\nHow many unique values does the different character variables have?\n\nAny fake data? (hint: Yes, for educational purposes I have added some fake data)\n\n\n\nShow the code\nlibrary(skimr)\nskim(soldiers)"
  },
  {
    "objectID": "day_1_dplyr.html#select",
    "href": "day_1_dplyr.html#select",
    "title": "dplyr",
    "section": "2.1 select()",
    "text": "2.1 select()\n\nselect the columns subjectid, sex, age\n\n\nShow the code\nsoldiers %&gt;% \n  select(subjectid, sex, age)\n\n\n\n\n\n\nselect the columns 1, 3, 5:7\n\n\nShow the code\nsoldiers %&gt;% \n  select(1,3,5:7)\n\n\n\n\n\n\nremove the columns 3:5\n\n\nShow the code\nsoldiers %&gt;% \n  select(-(3:5))\n\n\n\n\n\n\nselect all columns that contains the word “circumference”\n\n\n\n\n\n\nHINT\n\n\n\n\n\nUse one of the tidyselect helper functions.\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  select(contains(\"circumference\"))\n\n\n\n\n\nremove all columns containing the letter “c”\n\n\n\n\n\n\nHINT\n\n\n\n\n\nUse one of the tidyselect helper functions.\nUse a minus sign.\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  select(-contains(\"c\"))\n\n\n\n\n\nselect all columns that contains a “c” OR “x” OR “y” OR “z”\n\n\n\n\n\n\nHINT\n\n\n\n\n\nIn R(and many other programming languages) the | sign is used as a logical operator for OR.\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  select(contains(\"c\") | contains(\"x\") | contains(\"y\") | contains(\"z\"))\n\n\n\n\n\nselect all columns that contains a “c” OR “x” OR “y” OR “z”\nThis time use the tidyselect helper function called matches()\nmatches() allows you to use logical operators inside the function. E.g., matches(\"this|that\")\n\n\nShow the code\nsoldiers %&gt;% \n  select(matches(\"c|x|y|z\"))\n\n\n\n\n\nChallenge: Why not always use matches()?\nUse the preloaded iris data-set. (just write iris)\nTry to use matches() to select all columns containing a “.”\n\n\nShow the code\niris %&gt;% \n  select(matches(\".\")) %&gt;% \n  head() # This line is just to prevent a very long output.\n\n\n\nWhy did we select the Species column?\nWhat happens if we use contains() instead\n\n\nShow the code\niris %&gt;% \n  select(contains(\".\")) %&gt;% \n  head() # This line is just to prevent a very long output.\n\n\n\nWhat is the difference in the output? Why is it different?\n\n\nANSWER\n\ncontains(): Contains a literal string.\nmatches(): Matches a regular expression.\nIn regular expressions . is a wildcard.\n\nThe wildcard . matches any character. For example, a.b matches any string that contains an “a”, and then any character and then “b”; and a.*b matches any string that contains an “a”, and then the character “b” at some later point.\nhttps://en.wikipedia.org/wiki/Regular_expression"
  },
  {
    "objectID": "day_1_dplyr.html#filter",
    "href": "day_1_dplyr.html#filter",
    "title": "dplyr",
    "section": "2.2 filter()",
    "text": "2.2 filter()\nRestart R. (Click Session -&gt; Restart R)\nLoad the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\nLoad the soldiersdata and assign it to an object called soldiers\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\n\n\n\nKeep all rows where sex is Female:\n\n\n\n\n\n\nHint\n\n\n\n\n\n???? == \"Female\"\n\n\n\n\n\nShow the code\nsoldiers %&gt;% filter(sex == \"Female\")\n\n\n\n\n\nKeep all rows where weightkg is missing (NA value)\n\n\n\n\n\n\nHint\n\n\n\n\n\nuse the is.na() function\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  filter(is.na(weightkg))\n\n\n\n\n\nKeep all rows where WritingPreference is “Left hand” AND sex is “Female”\n\n\nShow the code\nsoldiers %&gt;% \n  filter(WritingPreference == \"Left hand\" ,  sex == \"Female\")  # you can use & instead of a ,\n\n\n\n\n\nKeep all rows where WritingPreference is “Left hand” OR sex is “Female”\n\n\nShow the code\nsoldiers %&gt;% \n  filter(WritingPreference == \"Left hand\" |  sex == \"Female\")  \n\n\n\n\n\nWhat is going wrong in this code?\n\nsoldiers %&gt;% \n  select(1:5) %&gt;% \n  filter(WritingPreference == \"Left hand\" |  sex == \"Female\")  \n\nThe error message is:\n\nError in `filter()`:\nℹ In argument: `WritingPreference == \"Left hand\" | sex == \"Female\"`.\nCaused by error:\n! object 'WritingPreference' not found\nRun `rlang::last_error()` to see where the error occurred.\n\n\n\nANSWER\nThe variable WritingPreference was not selected in the first line.\n\n\n\n\n\nKeep all rows where age is above 30 and the weightkg is below 600\n\n\nShow the code\nsoldiers %&gt;% \n  filter(age &gt; 30, weightkg &lt; 600)\n\n\n\n\n\n\nKeep all rows where Ethnicity is either “Mexican” OR “Filipino” OR “Caribbean Islander”\n\n\n\n\n\n\nHint\n\n\n\n\n\nyou need to use %in% and c()\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  filter(Ethnicity %in% c(\"Mexican\", \"Filipino\", \"Caribbean Islander\"))\n\n\n\n\n\n\n\n\nDifference between == and %in%\n\n\n\n\n\ntldr - Use %in% instead of == when you want to filter for multiple values.\nRead on if you want to understand why. (You don’t have to)\nThe code filter(Ethnicity == c(\"Mexican\", \"Filipino\")) is likely not doing what you expect. The ‘==’ operator does an element-wise comparison, which means it compares the first element of ‘Ethnicity’ to the first element of the vector (“Mexican”), the second element of ‘Ethnicity’ to the second element of the vector (“Filipino”). The short vector is then recycled so now the third element of ‘Ethnicity’ is compared to the first element of the vector (“Mexican”), the fourth element of ‘Ethnicity’ to the second element of the vector (“Filipino”), and so on.\nInspect the differences in how may rows these lines of code produce\n\nsoldiers %&gt;% \n  filter(Ethnicity %in% c(\"Mexican\", \"Filipino\"))\n\nsoldiers %&gt;% \n  filter(Ethnicity == c(\"Mexican\", \"Filipino\"))\n\nRun this code chunk line by line. Inspect the differences.\n\n# Create a data frame\ndf &lt;- data.frame(\n  Ethnicity = c(\"Mexican\", \"Filipino\", \"Italian\", \"Mexican\", \"Italian\", \"Filipino\"),\n  Name = c(\"John\", \"Maria\", \"Luigi\", \"Carlos\", \"Francesco\", \"Jose\"),\n  stringsAsFactors = FALSE\n)\n\n# Investigate the data frame\ndf\n\n# Filter using %in%\ndf %&gt;% filter(Ethnicity %in% c(\"Mexican\", \"Filipino\"))\n\n# Filter using ==\ndf %&gt;% filter(Ethnicity == c(\"Mexican\", \"Filipino\"))"
  },
  {
    "objectID": "day_1_dplyr.html#summarise",
    "href": "day_1_dplyr.html#summarise",
    "title": "dplyr",
    "section": "2.3 summarise()",
    "text": "2.3 summarise()\nRestart R. (Click Session -&gt; Restart R)\nLoad the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\nLoad the soldiersdata and assign it to an object called soldiers\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\n\n\n\nCalculate the mean and standard deviation of footlength\n\n\nShow the code\nsoldiers %&gt;% summarise(\n  footlength_avg = mean(footlength),\n  footlength_sd = sd(footlength))\n\n\n\n\n\nCalculate the median and interquartile range of earlength\n\n\nHINT\n\nuse the IQR() function\n\n\n\nShow the code\nsoldiers %&gt;% \n  summarise(\n    earlength_median = median(earlength),\n    earlength_iqr = IQR(earlength))\n\n\n\n\n\nCount the number of rows where WritingPreference is equal to “Right hand”\n\n\nShow the code\nsoldiers %&gt;%  \n  summarise(\n    n_righthanded = sum(WritingPreference == \"Right hand\"))\n\n\n\n\n\n\nHow old is the oldest soldier?\n\n\nHINT if you can’t work out why get an NA value\n\nMany Base R functions, including mean(), does not ignore NA values by default. This means that if the vector contains an NA value the result will be NA. Is this a good or bad thing?\nYou can set the argument na.rm = TRUE, to ignore missing values.\n\n\n\nShow the code\nsoldiers %&gt;% \n  summarise(\n    age_max = max(age, na.rm = TRUE))\n\n\n\n\n\n\nCalculate the mean weight of the Females\n\n\nHINT if you can’t work out why get an NA value\n\nMany Base R functions, including mean(), does not ignore NA values by default. This means that if the vector contains an NA value the result will be NA. Is this a good or bad thing?\nYou can set the argument na.rm = TRUE, to ignore missing values.\n\n\n\nShow the code\nsoldiers %&gt;% \n  filter(sex == \"Female\") %&gt;% \n  summarise(\n    weight_avg = mean(weightkg, na.rm = TRUE))\n\n\n\n\n\nCalculate the range in weight (max-min) within Males\n\n\nShow the code\nsoldiers %&gt;% \n  filter(sex == \"Male\") %&gt;% \n  summarise(\n    weight_range = max(weightkg, na.rm = TRUE)-min(weightkg, na.rm = TRUE))"
  },
  {
    "objectID": "day_1_dplyr.html#group_by-and-arrange",
    "href": "day_1_dplyr.html#group_by-and-arrange",
    "title": "dplyr",
    "section": "2.4 group_by() and arrange()",
    "text": "2.4 group_by() and arrange()\nRestart R. (Click Session -&gt; Restart R)\nLoad the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\nLoad the soldiersdata and assign it to an object called soldiers\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\n\n\n\nCalculate the mean and sd of weightkg and age for all Installations\n\n\nShow the code\nsoldiers %&gt;% \n  group_by(Installation) %&gt;% \n  summarise(weight_avg = mean(weightkg, na.rm = TRUE),\n            weight_sd = sd(weightkg, na.rm = TRUE),\n            age_avg = mean(age, na.rm = TRUE),\n            age_sd = sd(age, na.rm = TRUE))\n\n\n\n\n\nCalculate the mean and sd of weightkg and age for all Installations for both sexes\n\n\nShow the code\nsoldiers %&gt;% \n  group_by(Installation, sex) %&gt;% \n  summarise(weight_avg = mean(weightkg, na.rm = TRUE),\n            weight_sd = sd(weightkg, na.rm = TRUE),\n            age_avg = mean(age, na.rm = TRUE),\n            age_sd = sd(age, na.rm = TRUE))\n\n\n\n\n\nCalcualate the average height for each Installation and count the number of missing values within each Installation\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo count missings, use the functions sum() and is.na()\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  group_by(Installation) %&gt;% \n  summarise(height_avg = mean(Heightin, na.rm = TRUE),\n            height_n_miss = sum(is.na(Heightin)))\n\n\n\n\n\nAs before, but now also add the number of observations (rows) within each Installation\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse n()\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  group_by(Installation) %&gt;% \n  summarise(height_avg = mean(Heightin, na.rm = TRUE),\n            height_n_miss = sum(is.na(Heightin)),\n            n = n())\n\n\n\n\n\nAs before, but now arrange the output after number of soldiers at each Installation in descending order.\n\n\nShow the code\nsoldiers %&gt;% \n  group_by(Installation) %&gt;% \n  summarise(height_avg = mean(Heightin, na.rm = TRUE),\n            height_n_miss = sum(is.na(Heightin)),\n            n = n()) %&gt;% \n  arrange(desc(n))"
  },
  {
    "objectID": "day_1_dplyr.html#mutate",
    "href": "day_1_dplyr.html#mutate",
    "title": "dplyr",
    "section": "2.5 mutate()",
    "text": "2.5 mutate()\nRestart R. (Click Session -&gt; Restart R)\nLoad the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\nLoad the soldiersdata and assign it to an object called soldiers\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\n\n\n\nAdd a column called heightcm with the height of the soldiers in cm\n\nUpdate the soldiers dataset with the new variable\nplace the new variable after Heightin\n\n\n\nShow the code\nsoldiers &lt;- soldiers %&gt;% \n  mutate(\n    heightcm = Heightin * 2.54,\n    .after = Heightin)\n\n\n\n\n\n\nUpdate the weightkg column to kg instead of kg*10\n\nUpdate the soldiers dataset with the new weightkg column\n\n\n\nShow the code\nsoldiers &lt;- soldiers %&gt;% \n  mutate(\n    weightkg = weightkg/10\n    )\n\n\n\n\n\n\nAdd a column called BMI with the Body mass index (BMI) of the soldiers\nBMI\n\nUpdate the soldiers dataset to with the new variable\nplace the new variable after weightkg\n\n\n\nShow the code\nsoldiers &lt;- soldiers %&gt;% \n  mutate(BMI = weightkg/(heightcm/100)^2,\n         .after = weightkg)\n\n\n\n\n\n\nAdd a column called obese that contains the value TRUE if BMI is &gt; 30\n\n\nShow the code\nsoldiers %&gt;% \n  mutate(\n    obese = if_else(BMI &gt; 30, TRUE, FALSE),\n    .before = 1 # This line code just places the variable at the front\n  )\n\n# OR\n\nsoldiers %&gt;% \n  mutate(\n    obese = BMI &gt; 30,\n    .before = 1 # This line code just places the variable at the front\n  )\n\n\n\n\n\n\nInspect the below table from Wikipedia\n\n\n\n\n\nCategory\nBMI (kg/m2)\n\n\n\n\nUnderweight (Severe thinness)\n&lt; 16.0\n\n\nUnderweight (Moderate thinness)\n16.0 – 16.9\n\n\nUnderweight (Mild thinness)\n17.0 – 18.4\n\n\nNormal range\n18.5 – 24.9\n\n\nOverweight (Pre-obese)\n25.0 – 29.9\n\n\nObese (Class I)\n30.0 – 34.9\n\n\nObese (Class II)\n35.0 – 39.9\n\n\nObese (Class III)\n&gt;= 40.0\n\n\n\n\n\n\n\n\n\nCreate the variable category that tells us whether the soldiers are “Underweight”, “Normal range”, “Overweight”, or “Obese”\n\nUpdate the soldiers dataset with the new variable\nplace the new variable after BMI\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nUse case_when()\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\n\nsoldiers %&gt;% \n  mutate(\n    category = ????\n    )\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\n\nsoldiers %&gt;% \n  mutate(\n    category = case_when(\n      #TEST HERE ~ OUTPUT, \n      #TEST HERE ~ OUTPUT,\n      #TEST HERE ~ OUTPUT,\n      #.default = OUTPUT\n    )\n    )\n\n\n\n\n\n\nShow the code\nsoldiers &lt;- soldiers %&gt;% \n  mutate(\n    category = case_when(\n      BMI &lt; 18.5 ~ \"Underweight\",\n      BMI &lt; 25   ~ \"Normal range\",\n      BMI &lt; 30   ~ \"Overweight\",\n      BMI &gt;= 30  ~ \"Obese\",\n      .default = NA),\n    .after = BMI\n    )"
  },
  {
    "objectID": "day_1_dplyr.html#count",
    "href": "day_1_dplyr.html#count",
    "title": "dplyr",
    "section": "2.6 count()",
    "text": "2.6 count()\nFor simple counting count() is faster than summarise(n = n()) or mutate(n = n())\n\n\nWhat is this code equivalent to?\n\ndiamonds %&gt;% \n  count()\n\n\n\nANSWER\n\ncount() works like summarise(n = n())\n\n\n\n\nWhat is this code equivalent to?\n\ndiamonds %&gt;% \n  count(cut)\n\n\n\nANSWER\n\ncount(cut) works like group_by(cut) %&gt;% summarise(n = n())\n\n\n\n\nWhat is this code equivalent to?\n\ndiamonds %&gt;% \n  count(cut, color)\n\n\n\nANSWER\n\ncount(cut) works like group_by(cut, color) %&gt;% summarise(n = n())\n\n\n\n\nWhat is this code equivalent to?\n\ndiamonds %&gt;% \n  add_count()\n\n\n\nANSWER\n\nadd_count() works like mutate(n = n())\n\n\n\n\nCount the number of diamonds within each type of cut and calculate the percentage of each cut\n\n\nShow the code\ndiamonds %&gt;% \n  count(cut) %&gt;% \n  mutate(percent = n/sum(n)*100)\n\n\n# A tibble: 5 × 3\n  cut           n percent\n  &lt;ord&gt;     &lt;int&gt;   &lt;dbl&gt;\n1 Fair       1610    2.98\n2 Good       4906    9.10\n3 Very Good 12082   22.4 \n4 Premium   13791   25.6 \n5 Ideal     21551   40.0 \n\n\n\n\n\nWhats wrong with this code?\n\ndiamonds %&gt;% \n  group_by(cut) %&gt;% \n  count() %&gt;% \n  mutate(percent = n/sum(n)*100)"
  },
  {
    "objectID": "day_1_other.html",
    "href": "day_1_other.html",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "In this section we will explore a few other functions that you most likely are going to need.\n\npivot_wider() and pivot_longer()\n_join()\nacross()\n\n\n\n\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\n\n\n\n\nIn the realm of data science, it’s common to encounter data in what we call a “wide” format. To visualize this, imagine that each measurement of the same attribute is spread across multiple columns instead of being listed down in rows. Consider a scenario where we record a person’s weight at different intervals; in the wide format, we might see individual columns dedicated to each time point, like weightkg_week0, weightkg_week10 and so forth. Essentially, the column labels often carry dual information: the attribute (in this case, ‘weight’) and the condition or time (like ‘week0’ or ‘week10’).\nOften, data is inputted in this wide format for convenience, as it visually follows the chronological order of data collection or event occurrence. However, in the practice of data science, it’s generally more efficient to work with data in what we call a “long” format.\nIn long format, the data is structured such that each row is a unique observation or instance, and each column represents a unique variable or attribute. Continuing with the weight example, instead of having separate columns for each week’s weight (weightkg_week0, weightkg_week10), we would have separate rows for each weight measurement, with a column for the weight (weightkg) and another column for the time point (week).\nThe long format, also known as “tidy” data, provides a systematic and consistent structure, allowing us to work with data more effectively. Plus, many functions and packages in R, such as the popular ggplot2 for data visualization, are designed to work optimally with this long format.\nBut how do we move from wide format to long format? And vice versa? This is where the pivot_longer() and pivot_wider() functions from the tidyverse in R come into play.\n\n\n\nThe code creates a made-up data set. You dont need to understand the code.\n\nIs the data frame in a wide or long format? How can you tell?\n\n\nset.seed(1)\n\nweight_data &lt;- tibble(\n  id = 1:100,\n  sex = sample(c(\"Male\", \"Female\"), size = 100, replace = TRUE),\n  weightkg_week0 = rnorm(100, mean = 95, sd = 5)) %&gt;% \n  \n  # Mean wiegh more than women\n  mutate(\n    weightkg_week0 = if_else(\n      sex == \"Male\", weightkg_week0 * rnorm(100, mean = 1.15, sd = 0.3),\n      weightkg_week0\n    )\n  ) %&gt;% \n  \n  # Weight change over weeks\n  mutate(\n    weightkg_week1 = rnorm(100, mean = weightkg_week0*0.96, sd = 0.5), \n    weightkg_week2 = rnorm(100, mean = weightkg_week1*0.97, sd = 0.5),\n    weightkg_week3 = rnorm(100, mean = weightkg_week2*0.98, sd = 0.5), \n    weightkg_week4 = rnorm(100, mean = weightkg_week3*0.99, sd = 0.5),\n    weightkg_week5 = rnorm(100, mean = weightkg_week4, sd = 0.5))\n  \n\nweight_data\n\n\n\n\n\nThis exercise is only here to show you how troublesome it can be to work with data in a wide format. You don’t need to write all the code.\n\n\nShow the code\nweight_data %&gt;% \n  group_by(sex) %&gt;% \n  summarise(week0 = mean(weightkg_week0),\n            week1 = mean(weightkg_week1),\n            # etc. etc.\n            )\n\n\n\n\n\n\n\nThe pivot_longer() function takes wide format data and makes it longer by increasing the number of rows and decreasing the number of columns. For example, it can take our weight data from multiple columns (weightkg_week0, weightkg_week10) and collapse them into two columns: one for weight and one for timepoint.\n\n\n\n\n\nShow the code\n?pivot_longer\n\n\n\nWhat does this line in the help file mean?\ncols &lt;tidy-select&gt; Columns to pivot into longer format. ::: {.callout collapse=true} #### Answer This means that you use all the tidyselect functions that you also use with select() when you tell R what columns you to pivot into a longer format. :::\nWhat does the names_to and values_to arguments do?\n\n\n\n\n\n\n\nShow the code\nweight_data_long &lt;- weight_data %&gt;% \n  pivot_longer(cols = starts_with(\"weight\"))\n\nweight_data_long\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long &lt;- weight_data %&gt;% \n  pivot_longer(cols = starts_with(\"weight\"),\n               names_to = \"week\",\n               values_to = \"weightkg\")\nweight_data_long\n\n\nWe will fix the values in the week column later. For now we are happy with the long data format.\n\n\n\n\n\nassign you results to an object called weight_data_long_sum\n\n\n\nShow the code\nweight_data_long_sum &lt;- weight_data_long %&gt;% \n  group_by(sex, week) %&gt;% \n  summarise(mean = mean(weightkg))\n\nweight_data_long_sum\n\n\n\n\n\n\n\nThe pivot_wider() function takes long format data and makes it wider by decreasing the number of rows and increasing the number of columns. For instance, it can spread our long format weight data back into multiple columns for each week’s weight.\n\n\n\n\n\nShow the code\n?pivot_wider\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long_sum %&gt;% \n  pivot_wider(names_from = \"week\",\n              values_from = mean)\n\n\n# A tibble: 2 × 7\n# Groups:   sex [2]\n  sex    weightkg_week0 weightkg_week1 weightkg_week2 weightkg_week3\n  &lt;chr&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Female           94.7           90.9           88.3           86.4\n2 Male            113.           108.           105.           103. \n# ℹ 2 more variables: weightkg_week4 &lt;dbl&gt;, weightkg_week5 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long_sum %&gt;% \n  pivot_wider(names_from = \"sex\",\n              values_from = mean)\n\n\n# A tibble: 6 × 3\n  week           Female  Male\n  &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 weightkg_week0   94.7  113.\n2 weightkg_week1   90.9  108.\n3 weightkg_week2   88.3  105.\n4 weightkg_week3   86.4  103.\n5 weightkg_week4   85.5  102.\n6 weightkg_week5   85.4  102.\n\n\n\n\n\n\n\n\n\n\nChange it into three variables:\n\nsex (“female”, “male”)\npregnant (“yes”, “no”)\ncount, which is a non-negative integer representing the number of observations.\n\n\npreg &lt;- tribble(\n  ~pregnant, ~male, ~female,\n  \"yes\", NA, 10,\n  \"no\", 20, 12\n)\npreg\n\n\n\nShow the code\npreg %&gt;%\n  pivot_longer(c(male, female), names_to = \"sex\", values_to = \"count\")\n\n\n\n\n\n\ntable2 is a dataset that is load with the tidyverse. Try to type table2 in the console.\ntable2 displays the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. The data contains values associated with four variables (country, year, cases, and population).\nChange table2 into the output below:\n\n\nShow the code\ntable2 %&gt;% \n  pivot_wider(names_from = type,\n              values_from = count)\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\nThe join functions in the dplyr package in R are used to combine two dataframes based on a shared key (or set of keys). There are several types of joins, each with their own use cases:\n\ninner_join(): This returns only the rows in which the key exists in both dataframes.\nleft_join(): This returns all the rows from the first (left-hand) dataframe, and any rows from the second (right-hand) dataframe that match. If there’s no match, the columns for the right-hand dataframe will be filled with NA.\nright_join(): This is the reverse of left_join(). It returns all the rows from the second (right-hand) dataframe, and any rows from the first (left-hand) dataframe that match. If there’s no match, the columns for the left-hand dataframe will be filled with NA.\nfull_join(): This returns all rows from both dataframes. If there’s no match, the columns for the other dataframe will be filled with NA.\nsemi_join(): This returns all rows from the first (left-hand) dataframe where there are matching values in the second dataframe, but it doesn’t add any columns from the second dataframe.\nanti_join(): This returns all rows from the first (left-hand) dataframe where there are not matching values in the second dataframe. It also doesn’t add any columns from the second dataframe.\n\nThese functions are essential tools for merging and manipulating data in R, allowing you to effectively combine and cross-reference information from multiple dataframes.\n\nRead the slides from Day 1 to see code examples.\n\nRun this code to get example data\n\nset.seed(1)\nA &lt;- tibble(id = c(1:5, 7:8),\n            sex = sample(c(\"Male\", \"Female\"), 7, replace = TRUE),\n            nr_of_orders = sample(5:10, 7, replace = TRUE))\nB &lt;- tibble(id = 1:6,\n            age = sample(25:75, 6),\n            total_order_value = sample(5:50, 6)*100)\n\n\n\n\n\n\nShow the code\nanti_join(A, B)\nanti_join(B, A)\n\n\n\n\n\n\n\nsemi_join(A, B)\n\n\n\n\n\n\n\nShow the code\nleft_join(A, B)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  arrange(id)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) \n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) %&gt;% \n  group_by(sex) %&gt;% \n  summarise(\n    mean_avg_order_value = mean(avg_order_value, na.rm = TRUE)\n  )\n\n\n\n\n\n\n\nRestart R Load the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\nLoad the soldiers data set and assign it to an object called soliders\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\nThe across() function is part of the dplyr package in R and is used for applying a function (or functions) across multiple columns in a dataframe.\nacross() is particularly useful when you want to perform the same operation on multiple columns but don’t want to write out each operation individually. It works in combination with mutate() and summarise().\nVery importantly the .cols argument allows you to use the tidyselect functions that you are now familiar with.\nHere’s a basic example of its usage.\nLet’s say we want to take the mean of weightkg and earlength in the soldiers dataframe.\n\nsoldiers %&gt;% \n  summarise(across(\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = mean)                         # What function to apply - Notice that mean is not written round()\n    )\n\nYou can see that the mean of weightkg is NA. This is because is has missings values and mean() defaults to na.rm = FALSE. If we want to change this, we have to write a slightly more complicated code. In the following code you will find two new things:\n\n~ You tell R - “I am going to show you a function”\n.x You tell R - “Put the column that you have selected here”\n\n\nsoldiers %&gt;% \n  summarise(across(\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = ~ mean(.x, na.rm = TRUE))     # What function to apply\n    )\n\n.x can also be used outside of a function. Lets say we want to double all the values instead of taking the mean\n\nsoldiers %&gt;% \n  mutate(across(                         # Notice now we use mutate() instead of summarise()\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = ~ .x * 2                           \n    )) \n\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  mutate(across(\n    .cols = contains(\"circumference\"), \n    .fns = ~.x *0.393701))\n\n\n# A tibble: 6,348 × 24\n   subjectid fake_cpr    sex      age Ethnicity        DODRace WritingPreference\n       &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;            \n 1     10027 151168-2263 Man       41 &lt;NA&gt;                   1 Right hand       \n 2     10032 210475-1945 Male      35 &lt;NA&gt;                   1 Left hand        \n 3     10033 290568-1069 Man       42 &lt;NA&gt;                   2 Left hand        \n 4     10037 121283-0610 Female    26 &lt;NA&gt;                   2 Right hand       \n 5     10038 090189-0422 Female    21 Mexican                3 Right hand       \n 6     10042 020487-3860 Woman     23 &lt;NA&gt;                   1 Right hand       \n 7     10043 041287-8106 Woman     22 Caribbean Islan…       2 Right hand       \n 8     10051 130765-7114 Woman     45 &lt;NA&gt;                   1 Right hand       \n 9     10053 020166-4680 Woman     44 &lt;NA&gt;                   2 Left hand        \n10     10061 101188-3148 Female    21 &lt;NA&gt;                   1 Right hand       \n# ℹ 6,338 more rows\n# ℹ 17 more variables: Installation &lt;chr&gt;, Component &lt;chr&gt;, Branch &lt;chr&gt;,\n#   Heightin &lt;dbl&gt;, weightkg &lt;dbl&gt;, earlength &lt;dbl&gt;, footlength &lt;dbl&gt;,\n#   handlength &lt;dbl&gt;, handbreadth &lt;dbl&gt;, hipbreadth &lt;dbl&gt;, chestbreadth &lt;dbl&gt;,\n#   thighcircumference &lt;dbl&gt;, waistcircumference &lt;dbl&gt;,\n#   anklecircumference &lt;dbl&gt;, bicepscircumference &lt;dbl&gt;,\n#   calfcircumference &lt;dbl&gt;, span &lt;dbl&gt;\n\n\n\n\n\n\nYou can also target columns based on their type (logical, double, character, factor, numeric). Using the functions is.logical(), is.double(), etc.. However, you need to use them inside the function where()\nIn this example, we change all character columns to factors (You will learn about the column types on day 3). where(is.character) selects the columns where the condition is true (i.e., the column is character), and as.factor is the function that gets applied to these columns. As a result, all character columns get converted to factor.\n\nsoldiers %&gt;% \n  mutate(across(\n    .cols = where(is.character), # What columns to target - notice is.character is not written is.charater()\n    .fns = as.factor             # What function to apply - notice as.factor is written without ()                           \n    )) \n\n\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  mutate(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~.x+1.5\n    )\n  )\n\n\n# A tibble: 6,348 × 24\n   subjectid fake_cpr    sex      age Ethnicity        DODRace WritingPreference\n       &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;            \n 1    10028. 151168-2263 Man     42.5 &lt;NA&gt;                 2.5 Right hand       \n 2    10034. 210475-1945 Male    36.5 &lt;NA&gt;                 2.5 Left hand        \n 3    10034. 290568-1069 Man     43.5 &lt;NA&gt;                 3.5 Left hand        \n 4    10038. 121283-0610 Female  27.5 &lt;NA&gt;                 3.5 Right hand       \n 5    10040. 090189-0422 Female  22.5 Mexican              4.5 Right hand       \n 6    10044. 020487-3860 Woman   24.5 &lt;NA&gt;                 2.5 Right hand       \n 7    10044. 041287-8106 Woman   23.5 Caribbean Islan…     3.5 Right hand       \n 8    10052. 130765-7114 Woman   46.5 &lt;NA&gt;                 2.5 Right hand       \n 9    10054. 020166-4680 Woman   45.5 &lt;NA&gt;                 3.5 Left hand        \n10    10062. 101188-3148 Female  22.5 &lt;NA&gt;                 2.5 Right hand       \n# ℹ 6,338 more rows\n# ℹ 17 more variables: Installation &lt;chr&gt;, Component &lt;chr&gt;, Branch &lt;chr&gt;,\n#   Heightin &lt;dbl&gt;, weightkg &lt;dbl&gt;, earlength &lt;dbl&gt;, footlength &lt;dbl&gt;,\n#   handlength &lt;dbl&gt;, handbreadth &lt;dbl&gt;, hipbreadth &lt;dbl&gt;, chestbreadth &lt;dbl&gt;,\n#   thighcircumference &lt;dbl&gt;, waistcircumference &lt;dbl&gt;,\n#   anklecircumference &lt;dbl&gt;, bicepscircumference &lt;dbl&gt;,\n#   calfcircumference &lt;dbl&gt;, span &lt;dbl&gt;\n\n\n\n\n\n\nStandardizing a variable is a statistical process that transforms the variable’s values to have a mean of 0 and a standard deviation of 1. This is often used often used within machinelearning.\nThe most common way of standardizing a values is to subtract the mean from each value and divide by the standard deviation.\nThe standard score (or z-score) of a value x is calculated as:\n\\[z = (x - μ) / σ\\]\n\n\n\n\n\n\nHint\n\n\n\n\n\nIf we would target just a single columns the code could be\n\nsoldiers %&gt;% \n  mutate(\n    weightkg = (weightkg-mean(weightkg, na.rm = TRUE))/sd(weightkg, na.rm=TRUE)\n  )\n\n\n\n\n\n\nShow me the code\nsoldiers %&gt;% \n  mutate(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~(.x - mean(.x, na.rm = TRUE))/sd(.x, na.rm = TRUE)\n    )\n  )\n\n\n\n\n\n\nacross() can do much more than this. For instance, it can invoke multiple functions simultaneously in a single call, like calculating the mean and standard deviation of chosen variables. Or change the names of the newly created columns. Read more here"
  },
  {
    "objectID": "day_1_other.html#getting-started-for-now",
    "href": "day_1_other.html#getting-started-for-now",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "Show the code\nlibrary(tidyverse)\nlibrary(here)"
  },
  {
    "objectID": "day_1_other.html#wide-and-long-data-formats",
    "href": "day_1_other.html#wide-and-long-data-formats",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "In the realm of data science, it’s common to encounter data in what we call a “wide” format. To visualize this, imagine that each measurement of the same attribute is spread across multiple columns instead of being listed down in rows. Consider a scenario where we record a person’s weight at different intervals; in the wide format, we might see individual columns dedicated to each time point, like weightkg_week0, weightkg_week10 and so forth. Essentially, the column labels often carry dual information: the attribute (in this case, ‘weight’) and the condition or time (like ‘week0’ or ‘week10’).\nOften, data is inputted in this wide format for convenience, as it visually follows the chronological order of data collection or event occurrence. However, in the practice of data science, it’s generally more efficient to work with data in what we call a “long” format.\nIn long format, the data is structured such that each row is a unique observation or instance, and each column represents a unique variable or attribute. Continuing with the weight example, instead of having separate columns for each week’s weight (weightkg_week0, weightkg_week10), we would have separate rows for each weight measurement, with a column for the weight (weightkg) and another column for the time point (week).\nThe long format, also known as “tidy” data, provides a systematic and consistent structure, allowing us to work with data more effectively. Plus, many functions and packages in R, such as the popular ggplot2 for data visualization, are designed to work optimally with this long format.\nBut how do we move from wide format to long format? And vice versa? This is where the pivot_longer() and pivot_wider() functions from the tidyverse in R come into play.\n\n\n\nThe code creates a made-up data set. You dont need to understand the code.\n\nIs the data frame in a wide or long format? How can you tell?\n\n\nset.seed(1)\n\nweight_data &lt;- tibble(\n  id = 1:100,\n  sex = sample(c(\"Male\", \"Female\"), size = 100, replace = TRUE),\n  weightkg_week0 = rnorm(100, mean = 95, sd = 5)) %&gt;% \n  \n  # Mean wiegh more than women\n  mutate(\n    weightkg_week0 = if_else(\n      sex == \"Male\", weightkg_week0 * rnorm(100, mean = 1.15, sd = 0.3),\n      weightkg_week0\n    )\n  ) %&gt;% \n  \n  # Weight change over weeks\n  mutate(\n    weightkg_week1 = rnorm(100, mean = weightkg_week0*0.96, sd = 0.5), \n    weightkg_week2 = rnorm(100, mean = weightkg_week1*0.97, sd = 0.5),\n    weightkg_week3 = rnorm(100, mean = weightkg_week2*0.98, sd = 0.5), \n    weightkg_week4 = rnorm(100, mean = weightkg_week3*0.99, sd = 0.5),\n    weightkg_week5 = rnorm(100, mean = weightkg_week4, sd = 0.5))\n  \n\nweight_data\n\n\n\n\n\nThis exercise is only here to show you how troublesome it can be to work with data in a wide format. You don’t need to write all the code.\n\n\nShow the code\nweight_data %&gt;% \n  group_by(sex) %&gt;% \n  summarise(week0 = mean(weightkg_week0),\n            week1 = mean(weightkg_week1),\n            # etc. etc.\n            )"
  },
  {
    "objectID": "day_1_other.html#pivot_longer",
    "href": "day_1_other.html#pivot_longer",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "The pivot_longer() function takes wide format data and makes it longer by increasing the number of rows and decreasing the number of columns. For example, it can take our weight data from multiple columns (weightkg_week0, weightkg_week10) and collapse them into two columns: one for weight and one for timepoint.\n\n\n\n\n\nShow the code\n?pivot_longer\n\n\n\nWhat does this line in the help file mean?\ncols &lt;tidy-select&gt; Columns to pivot into longer format. ::: {.callout collapse=true} #### Answer This means that you use all the tidyselect functions that you also use with select() when you tell R what columns you to pivot into a longer format. :::\nWhat does the names_to and values_to arguments do?\n\n\n\n\n\n\n\nShow the code\nweight_data_long &lt;- weight_data %&gt;% \n  pivot_longer(cols = starts_with(\"weight\"))\n\nweight_data_long\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long &lt;- weight_data %&gt;% \n  pivot_longer(cols = starts_with(\"weight\"),\n               names_to = \"week\",\n               values_to = \"weightkg\")\nweight_data_long\n\n\nWe will fix the values in the week column later. For now we are happy with the long data format.\n\n\n\n\n\nassign you results to an object called weight_data_long_sum\n\n\n\nShow the code\nweight_data_long_sum &lt;- weight_data_long %&gt;% \n  group_by(sex, week) %&gt;% \n  summarise(mean = mean(weightkg))\n\nweight_data_long_sum"
  },
  {
    "objectID": "day_1_other.html#pivot_wider",
    "href": "day_1_other.html#pivot_wider",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "The pivot_wider() function takes long format data and makes it wider by decreasing the number of rows and increasing the number of columns. For instance, it can spread our long format weight data back into multiple columns for each week’s weight.\n\n\n\n\n\nShow the code\n?pivot_wider\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long_sum %&gt;% \n  pivot_wider(names_from = \"week\",\n              values_from = mean)\n\n\n# A tibble: 2 × 7\n# Groups:   sex [2]\n  sex    weightkg_week0 weightkg_week1 weightkg_week2 weightkg_week3\n  &lt;chr&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 Female           94.7           90.9           88.3           86.4\n2 Male            113.           108.           105.           103. \n# ℹ 2 more variables: weightkg_week4 &lt;dbl&gt;, weightkg_week5 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nShow the code\nweight_data_long_sum %&gt;% \n  pivot_wider(names_from = \"sex\",\n              values_from = mean)\n\n\n# A tibble: 6 × 3\n  week           Female  Male\n  &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 weightkg_week0   94.7  113.\n2 weightkg_week1   90.9  108.\n3 weightkg_week2   88.3  105.\n4 weightkg_week3   86.4  103.\n5 weightkg_week4   85.5  102.\n6 weightkg_week5   85.4  102."
  },
  {
    "objectID": "day_1_other.html#more-examples-of-pivot_wider-and-pivot_longer",
    "href": "day_1_other.html#more-examples-of-pivot_wider-and-pivot_longer",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "Change it into three variables:\n\nsex (“female”, “male”)\npregnant (“yes”, “no”)\ncount, which is a non-negative integer representing the number of observations.\n\n\npreg &lt;- tribble(\n  ~pregnant, ~male, ~female,\n  \"yes\", NA, 10,\n  \"no\", 20, 12\n)\npreg\n\n\n\nShow the code\npreg %&gt;%\n  pivot_longer(c(male, female), names_to = \"sex\", values_to = \"count\")\n\n\n\n\n\n\ntable2 is a dataset that is load with the tidyverse. Try to type table2 in the console.\ntable2 displays the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. The data contains values associated with four variables (country, year, cases, and population).\nChange table2 into the output below:\n\n\nShow the code\ntable2 %&gt;% \n  pivot_wider(names_from = type,\n              values_from = count)\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "day_1_other.html#join",
    "href": "day_1_other.html#join",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "The join functions in the dplyr package in R are used to combine two dataframes based on a shared key (or set of keys). There are several types of joins, each with their own use cases:\n\ninner_join(): This returns only the rows in which the key exists in both dataframes.\nleft_join(): This returns all the rows from the first (left-hand) dataframe, and any rows from the second (right-hand) dataframe that match. If there’s no match, the columns for the right-hand dataframe will be filled with NA.\nright_join(): This is the reverse of left_join(). It returns all the rows from the second (right-hand) dataframe, and any rows from the first (left-hand) dataframe that match. If there’s no match, the columns for the left-hand dataframe will be filled with NA.\nfull_join(): This returns all rows from both dataframes. If there’s no match, the columns for the other dataframe will be filled with NA.\nsemi_join(): This returns all rows from the first (left-hand) dataframe where there are matching values in the second dataframe, but it doesn’t add any columns from the second dataframe.\nanti_join(): This returns all rows from the first (left-hand) dataframe where there are not matching values in the second dataframe. It also doesn’t add any columns from the second dataframe.\n\nThese functions are essential tools for merging and manipulating data in R, allowing you to effectively combine and cross-reference information from multiple dataframes.\n\nRead the slides from Day 1 to see code examples.\n\nRun this code to get example data\n\nset.seed(1)\nA &lt;- tibble(id = c(1:5, 7:8),\n            sex = sample(c(\"Male\", \"Female\"), 7, replace = TRUE),\n            nr_of_orders = sample(5:10, 7, replace = TRUE))\nB &lt;- tibble(id = 1:6,\n            age = sample(25:75, 6),\n            total_order_value = sample(5:50, 6)*100)\n\n\n\n\n\n\nShow the code\nanti_join(A, B)\nanti_join(B, A)\n\n\n\n\n\n\n\nsemi_join(A, B)\n\n\n\n\n\n\n\nShow the code\nleft_join(A, B)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  arrange(id)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) \n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) %&gt;% \n  group_by(sex) %&gt;% \n  summarise(\n    mean_avg_order_value = mean(avg_order_value, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "day_1_other.html#across",
    "href": "day_1_other.html#across",
    "title": "Other data wrangling functions",
    "section": "",
    "text": "Restart R Load the tidyverse and the here package\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\nLoad the soldiers data set and assign it to an object called soliders\n\n\nShow the code\nsoldiers &lt;- read_csv2(here(\"raw_data\", \"soldiers.csv\"))\n\n\nThe across() function is part of the dplyr package in R and is used for applying a function (or functions) across multiple columns in a dataframe.\nacross() is particularly useful when you want to perform the same operation on multiple columns but don’t want to write out each operation individually. It works in combination with mutate() and summarise().\nVery importantly the .cols argument allows you to use the tidyselect functions that you are now familiar with.\nHere’s a basic example of its usage.\nLet’s say we want to take the mean of weightkg and earlength in the soldiers dataframe.\n\nsoldiers %&gt;% \n  summarise(across(\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = mean)                         # What function to apply - Notice that mean is not written round()\n    )\n\nYou can see that the mean of weightkg is NA. This is because is has missings values and mean() defaults to na.rm = FALSE. If we want to change this, we have to write a slightly more complicated code. In the following code you will find two new things:\n\n~ You tell R - “I am going to show you a function”\n.x You tell R - “Put the column that you have selected here”\n\n\nsoldiers %&gt;% \n  summarise(across(\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = ~ mean(.x, na.rm = TRUE))     # What function to apply\n    )\n\n.x can also be used outside of a function. Lets say we want to double all the values instead of taking the mean\n\nsoldiers %&gt;% \n  mutate(across(                         # Notice now we use mutate() instead of summarise()\n    .cols = c(\"weightkg\", \"earlength\"),  # What columns to target\n    .fns = ~ .x * 2                           \n    )) \n\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  mutate(across(\n    .cols = contains(\"circumference\"), \n    .fns = ~.x *0.393701))\n\n\n# A tibble: 6,348 × 24\n   subjectid fake_cpr    sex      age Ethnicity        DODRace WritingPreference\n       &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;            \n 1     10027 151168-2263 Man       41 &lt;NA&gt;                   1 Right hand       \n 2     10032 210475-1945 Male      35 &lt;NA&gt;                   1 Left hand        \n 3     10033 290568-1069 Man       42 &lt;NA&gt;                   2 Left hand        \n 4     10037 121283-0610 Female    26 &lt;NA&gt;                   2 Right hand       \n 5     10038 090189-0422 Female    21 Mexican                3 Right hand       \n 6     10042 020487-3860 Woman     23 &lt;NA&gt;                   1 Right hand       \n 7     10043 041287-8106 Woman     22 Caribbean Islan…       2 Right hand       \n 8     10051 130765-7114 Woman     45 &lt;NA&gt;                   1 Right hand       \n 9     10053 020166-4680 Woman     44 &lt;NA&gt;                   2 Left hand        \n10     10061 101188-3148 Female    21 &lt;NA&gt;                   1 Right hand       \n# ℹ 6,338 more rows\n# ℹ 17 more variables: Installation &lt;chr&gt;, Component &lt;chr&gt;, Branch &lt;chr&gt;,\n#   Heightin &lt;dbl&gt;, weightkg &lt;dbl&gt;, earlength &lt;dbl&gt;, footlength &lt;dbl&gt;,\n#   handlength &lt;dbl&gt;, handbreadth &lt;dbl&gt;, hipbreadth &lt;dbl&gt;, chestbreadth &lt;dbl&gt;,\n#   thighcircumference &lt;dbl&gt;, waistcircumference &lt;dbl&gt;,\n#   anklecircumference &lt;dbl&gt;, bicepscircumference &lt;dbl&gt;,\n#   calfcircumference &lt;dbl&gt;, span &lt;dbl&gt;\n\n\n\n\n\n\nYou can also target columns based on their type (logical, double, character, factor, numeric). Using the functions is.logical(), is.double(), etc.. However, you need to use them inside the function where()\nIn this example, we change all character columns to factors (You will learn about the column types on day 3). where(is.character) selects the columns where the condition is true (i.e., the column is character), and as.factor is the function that gets applied to these columns. As a result, all character columns get converted to factor.\n\nsoldiers %&gt;% \n  mutate(across(\n    .cols = where(is.character), # What columns to target - notice is.character is not written is.charater()\n    .fns = as.factor             # What function to apply - notice as.factor is written without ()                           \n    )) \n\n\n\n\n\n\n\nShow the code\nsoldiers %&gt;% \n  mutate(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~.x+1.5\n    )\n  )\n\n\n# A tibble: 6,348 × 24\n   subjectid fake_cpr    sex      age Ethnicity        DODRace WritingPreference\n       &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;            \n 1    10028. 151168-2263 Man     42.5 &lt;NA&gt;                 2.5 Right hand       \n 2    10034. 210475-1945 Male    36.5 &lt;NA&gt;                 2.5 Left hand        \n 3    10034. 290568-1069 Man     43.5 &lt;NA&gt;                 3.5 Left hand        \n 4    10038. 121283-0610 Female  27.5 &lt;NA&gt;                 3.5 Right hand       \n 5    10040. 090189-0422 Female  22.5 Mexican              4.5 Right hand       \n 6    10044. 020487-3860 Woman   24.5 &lt;NA&gt;                 2.5 Right hand       \n 7    10044. 041287-8106 Woman   23.5 Caribbean Islan…     3.5 Right hand       \n 8    10052. 130765-7114 Woman   46.5 &lt;NA&gt;                 2.5 Right hand       \n 9    10054. 020166-4680 Woman   45.5 &lt;NA&gt;                 3.5 Left hand        \n10    10062. 101188-3148 Female  22.5 &lt;NA&gt;                 2.5 Right hand       \n# ℹ 6,338 more rows\n# ℹ 17 more variables: Installation &lt;chr&gt;, Component &lt;chr&gt;, Branch &lt;chr&gt;,\n#   Heightin &lt;dbl&gt;, weightkg &lt;dbl&gt;, earlength &lt;dbl&gt;, footlength &lt;dbl&gt;,\n#   handlength &lt;dbl&gt;, handbreadth &lt;dbl&gt;, hipbreadth &lt;dbl&gt;, chestbreadth &lt;dbl&gt;,\n#   thighcircumference &lt;dbl&gt;, waistcircumference &lt;dbl&gt;,\n#   anklecircumference &lt;dbl&gt;, bicepscircumference &lt;dbl&gt;,\n#   calfcircumference &lt;dbl&gt;, span &lt;dbl&gt;\n\n\n\n\n\n\nStandardizing a variable is a statistical process that transforms the variable’s values to have a mean of 0 and a standard deviation of 1. This is often used often used within machinelearning.\nThe most common way of standardizing a values is to subtract the mean from each value and divide by the standard deviation.\nThe standard score (or z-score) of a value x is calculated as:\n\\[z = (x - μ) / σ\\]\n\n\n\n\n\n\nHint\n\n\n\n\n\nIf we would target just a single columns the code could be\n\nsoldiers %&gt;% \n  mutate(\n    weightkg = (weightkg-mean(weightkg, na.rm = TRUE))/sd(weightkg, na.rm=TRUE)\n  )\n\n\n\n\n\n\nShow me the code\nsoldiers %&gt;% \n  mutate(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~(.x - mean(.x, na.rm = TRUE))/sd(.x, na.rm = TRUE)\n    )\n  )\n\n\n\n\n\n\nacross() can do much more than this. For instance, it can invoke multiple functions simultaneously in a single call, like calculating the mean and standard deviation of chosen variables. Or change the names of the newly created columns. Read more here"
  },
  {
    "objectID": "day_1_quarto_documents.html#quarto-documents",
    "href": "day_1_quarto_documents.html#quarto-documents",
    "title": "quarto documents",
    "section": "1 quarto documents",
    "text": "1 quarto documents\n\n\nStart a new .qmd document\nFile -&gt; New File -&gt; Quarto Document -&gt;\n\nMake sure the settings are set to “Document” and “HTML” (both are default settings),\nUncheck ‘Use visual markdown editor’\npress “Create”\n\nThe document contains three types of code YAML, R, and Markdown code. Take a look at the document and see if you can recognize the sections with R code.\n\nSave your file (Important: file_name_matters).\n\nPres “Render” and see what happens."
  },
  {
    "objectID": "day_1_quarto_documents.html#yaml-code",
    "href": "day_1_quarto_documents.html#yaml-code",
    "title": "quarto documents",
    "section": "2 YAML code",
    "text": "2 YAML code\nYAML (Yet Another Markup Language).\nThe YAML code is at the very top of the document. It begins with --- and ends with ---. It gives instructions to your computer on how it should build your document. You will learn about YAML code later. For now - notice that it is there and forget about it.\n\nDelete everything in the document except the YAML code"
  },
  {
    "objectID": "day_1_quarto_documents.html#markdown-code",
    "href": "day_1_quarto_documents.html#markdown-code",
    "title": "quarto documents",
    "section": "3 Markdown code",
    "text": "3 Markdown code\nMarkdown is a simple, text-based language used to style text on the web. You control the display of text by adding non-intrusive symbols: headings are made with hashtags (#), bold text with asterisks (*) or underscores (_), links with brackets and parentheses, among others. It’s quick to learn and write.\n\n\nHeadlines\nHeadlines are made using one or more # signs followed by a space\n# Largest headline\n## Second largest headline\n### Third largest headline\n##### Smallest headline possible.\n\nPractice making different headlines.\n\n\n\n\nBold and Italic\n*text* becomes text\n**text** becomes text\n***text*** becomes text\n\nPractice writing something in italics and bold\n\n\n\n\nNew lines\nTo break a line in R Markdown and have it appear in your output, use two trailing spaces and then hit return.\nIf you want a hard line break end your lines with a \\\n\nPractice making line-breaks.\n\n\n\n\nMarkdown Code\nYou can more about Markdown code here"
  },
  {
    "objectID": "day_1_quarto_documents.html#r-code",
    "href": "day_1_quarto_documents.html#r-code",
    "title": "quarto documents",
    "section": "4 R code",
    "text": "4 R code\n\n\nR code chunks\nInsert a code chunk in your document (Default CTRL+Alt+I)\nIf pressing CTRL+Alt+I doesn’t work click Tools -&gt; Command Palette -&gt; and type “Chunk” in the search field\nWhat you write inside the codechunk will be evaluated as R code.\nWrite 2+2 inside the Code chunk you just created, and Render the document.\n\n\n\n\n\n\nsolution\n\n\n\n\n\nYour code block should look something like this:\n```{r}\n2+2\n```\n\n\n\n\n\n\nRun Code chunk\nYou don’t need to Render your document in order to see the output of your code.\nPlace the cursor inside the code chunk you just made and Click the green triangle (play-sign) in the right side of the code chunk.\nNotice the output in the console.\nR comes with many inbuilt datasets, one of them is the iris dataset.\nPlot the iris dataset.\nInsert a codechunk, and write plot(iris) inside the codechunk.\nClick the green triangle.\n\n\n\n\n\n\nsolution\n\n\n\n\n\nYour code block should look something like this:\n```{r}\nplot(iris)\n```\n\n\n\n\n\n\n\n\n\nLifehack\n\n\n\npressing ALT+Enter will run the current line or selection.\npressing CTRL+Enter will run the current line or selection and jump to next line.\npressing CTRL+ALT+C will run the current code chunk (instead of just the current line).\n\n\n\n\n\nInline R code\nInline R code allows you to incorporate the results of your R code directly into the text of a document. It is useful because it lets you weave the results of your data analysis directly into your written text, making your documents more reproducible and prevents errors if your data changes.\nInline R code is written within the text and is surrounded by backticks and includes an “r” at the start. `r  3 + 4` will display the result 7 in the rendered document.\n\nUse the function nrow() and inline R code to write a sentence that says how many rows the iris dataset has\n\n\n\n\n\n\n\nsolution\n\n\n\n\n\nThe iris dataset contains `r nrow(iris)` rows\nor\nThe iris dataset contains `r iris %&gt;%  nrow()` rows"
  },
  {
    "objectID": "day_1_settting_up_your_course_project.html",
    "href": "day_1_settting_up_your_course_project.html",
    "title": "Setting up your course project",
    "section": "",
    "text": "1 Setting up your course project\nFollow these instructions step by step:\n\nStart a new project. Think about the name and where you place the project. You are going to be using this project a lot. (Important: project_and_folder_names_matter)\nCreate a folder in your project called raw_data\n\nCreate a folder in your project called clean_data\n\nCreate a folder in your project called scripts\n\nPlace the soldiers.csv file from ItsLearning in the raw_data folder\n\nCreate an R script (File -&gt; New File -&gt; R script), save it in the scripts folder and call it 01_import.R\n\nClose the R script you just created and leave it for now.\n\nThis file and folder structure is a basic setup that will work for most projects. We will return to this later today, and on day 4 you will learn how to improve this setup even further.\n\n\n\nDiscuss with you neighbor what the meaning of this madness can be about?\n\n\n\n\n\n2 Setting up your course project (continued)\n\n\n\n\n\n\nImportant\n\n\n\nYou should not do this before you have completed the wrangling exercises for select(), filter(), summarise(), group_by(), arrange(), and mutate()\n\n\nYou now have the skills to continue the work we started in Section 1.\nThis coming task is important for the rest of your course.\n\nAs you have noticed the soldiers dataset is not perfect when we load it, e.g., Height is measured in inches, weightkg is measured in Kg*10, etc..\nTherefore, we need to change a few things before we can continue our work with this data.\nIt is essential in datascience and research that this process is documented and reproducible.\n\n\n\nOpen the R script 01_import.R that you created in Section 1.\n\nFor the rest of this section you are going to work in this R script.\n\n \n\n\nWrite the necessary code to import the soldiers.csv file and update the data\nWrite comments and explain your code as you solve the steps below\n\nAdd heightcm (height in cm)\nFix weightkg\nExplore the sex variable and fix it\nAdd BMI\nAdd category (level of BMI)\nAdd race - Base the values in race on the description below\nRemove Heightin\nPlace the variables in an order that you like (use relocate())\nMake sure that all changes are assigned to soldiers. Your script should provide you with an updated version of soldiers in the environment pane.\n\n\n\n\n\n\n\nrace in soldiers\n\n\n\n\n\nDODRace is a variable in the soldiers dataset. The description is given below: \nDODRace – Department of Defense Race; a single digit indicating a subject’s self-reported preferred single race where selecting multiple races is not an option. This variable is intended to be comparable to the Defense Manpower Data Center demographic data. Where 1 = White, 2 = Black, 3 = Hispanic, 4 = Asian, 5 = Native American, 6 = Pacific Islander, 8 = Other"
  },
  {
    "objectID": "gfx/RR/prefer_text_files.html",
    "href": "gfx/RR/prefer_text_files.html",
    "title": "1 Human-readable files",
    "section": "",
    "text": "1 Human-readable files\nAre always preferable to binary files\nMarkup files (HTML, XML, etc) are human readable, but complex\nApplication files (.odt, .docx) are often very complex markup files"
  },
  {
    "objectID": "index.html#velkommen-til-r4phd",
    "href": "index.html#velkommen-til-r4phd",
    "title": "R4phd",
    "section": "1 Velkommen til R4phd",
    "text": "1 Velkommen til R4phd\nDet var tanken med denne webside at danne basis for almindelig ‘klasseværelses’ undervisning i brugen af R, RStudio og resten af R-økosystemet. Mest med tanke for PhD kurser og med udgangspunktet i Sundhedsvidenskab på Syddansk universitet i Odense.\nDer findes i forvejen et overflødighedshorn af vejledninger, eksempler, videoer, FAQ’s og mere rundt omkring på internettet, men det kan være svært at finde rundt i og det er overvejende på Engelsk.\n\nDu kan starte ved at kigge i indholdsfortegnelsen i fold-ud menuen (øverst til venstre).\n\n\n\n\n\n\nSådan bruger du hjemmesiden\n\n\n\n\n\n\n2 Styresystem – Windows, MacOS eller Linux?\nUndervisningsmaterialet her på siden er lavet på en Linux computer.\nHvis du bruger Microsoft Windows eller Apple MacOS må du derfor forvente at mine video eksempler ser lidt anderledes ud end de gør på din egen skærm.\nDet burde ikke give anledning til problemer da R og RStudio fungerer fint og næsten ens på alle tre styresystemer, men der hvor jeg er bekendt med forskelle mellem styresystemerne vil jeg gøre opmærksom på det med tre forskellige faneblade på denne måde (klik på den relevante fane):\n\nWindowsMacOSLinux\n\n\n…Windows specifikt indhold\n\n\n…MacOS specifikt indhold\n\n\n…Linux specifikt indhold\n\n\n\n\n\n3 Øvelser\nNogle steder vil du finde små øvelser placeret i fold-ud bokse som denne her.\nKlik på fold-ud boksen herunder:\n\n\n\n\n\n\nØvelse #1\n\n\n\n\n\nHvis der er forskelle mellem Windows, MacOS og Linux, vil du kunne finde den relevante information:\n\nI et seperat vindue markeret med advarselstrekant\nPå et af tre faneblade markeret med styresystemet\nPå et postkort på køleskabet i kantinen\n\n\n\n\n… og løsningen placeret i tilsvarende fold-ud bokse.\n\n\n\n\n\n\nLøsning øvelse #1\n\n\n\n\n\n\nI et seperat vindue markeret med advarselstrekant\nPå et af tre faneblade markeret med styresystemet\nPå et postkort på køleskabet i kantinen\n\n\n\n\n\n\n4 Navigation\nDer er flere muligheder for at navigere mellem siderne:\n\nI venstre side findes et indeks over afsnit og underordnede sider\nPå hver side i et afsnit, vil der nederst være links til forrige og næste side\nEn søge funktion er tilgængelig i øverste højre hjørne\n\n\n\n5 Kommentarer og spørgsmål\nDet er muligt at efterlade kommentarer, forslag og spørgsmål nederst på hver side – hjælp venligst med til at forbedre indholdet på R4PhD i kommentar felterne:\n\nDu skal bruge en github konto, som kan oprettes gratis og som formentligt vil vise sig nyttig i fremtiden.\nBemærk også, at da siderne her på R4PhD er skrevet parvist på dansk og engelsk, vil kommentarer vises på begge sider – hvis det er muligt så skriv derfor alle kommentarer på engelsk.\n\nVi anbefaler også at bruge Stack Overflow som indgangspunkt til R’s internet samfund (online community) når du får brug for hjælp. Vi har oprettet en Stack Overflow for Teams gruppe specifikt til denne undervisning, men brug bare det overordnede Stack Overflow. Du vil opdage at du nok skal få hjælp dér, meget hurtigt hvis du kan formulere dine spørgsmål klart og tydeligt.\nDet er muligt at oprette en separat konto ved Stack Overflow, men du kan også logge ind dér med den GitHub konto du netop (?) har oprettet. Alternativt kan du også logge en med en Google eller Facebook konto.\nVi har (indtil videre) besluttet, at bruge Stack Overflow for Teams som platform for kommentarer og spørgsmål.\nDet er muligt at oprette en konto ved Stack Overflow, eller at logge ind med en Google, Github eller Facebook konto, hvis man har sådan én i forvejen."
  },
  {
    "objectID": "index.html#styresystem-windows-macos-eller-linux",
    "href": "index.html#styresystem-windows-macos-eller-linux",
    "title": "R4phd",
    "section": "2 Styresystem – Windows, MacOS eller Linux?",
    "text": "2 Styresystem – Windows, MacOS eller Linux?\nUndervisningsmaterialet her på siden er lavet på en Linux computer.\nHvis du bruger Microsoft Windows eller Apple MacOS må du derfor forvente at mine video eksempler ser lidt anderledes ud end de gør på din egen skærm.\nDet burde ikke give anledning til problemer da R og RStudio fungerer fint og næsten ens på alle tre styresystemer, men der hvor jeg er bekendt med forskelle mellem styresystemerne vil jeg gøre opmærksom på det med tre forskellige faneblade på denne måde (klik på den relevante fane):\n\nWindowsMacOSLinux\n\n\n…Windows specifikt indhold\n\n\n…MacOS specifikt indhold\n\n\n…Linux specifikt indhold"
  },
  {
    "objectID": "index.html#øvelser",
    "href": "index.html#øvelser",
    "title": "R4phd",
    "section": "3 Øvelser",
    "text": "3 Øvelser\nNogle steder vil du finde små øvelser placeret i fold-ud bokse som denne her.\nKlik på fold-ud boksen herunder:\n\n\n\n\n\n\nØvelse #1\n\n\n\n\n\nHvis der er forskelle mellem Windows, MacOS og Linux, vil du kunne finde den relevante information:\n\nI et seperat vindue markeret med advarselstrekant\nPå et af tre faneblade markeret med styresystemet\nPå et postkort på køleskabet i kantinen\n\n\n\n\n… og løsningen placeret i tilsvarende fold-ud bokse.\n\n\n\n\n\n\nLøsning øvelse #1\n\n\n\n\n\n\nI et seperat vindue markeret med advarselstrekant\nPå et af tre faneblade markeret med styresystemet\nPå et postkort på køleskabet i kantinen"
  },
  {
    "objectID": "index.html#navigation",
    "href": "index.html#navigation",
    "title": "R4phd",
    "section": "4 Navigation",
    "text": "4 Navigation\nDer er flere muligheder for at navigere mellem siderne:\n\nI venstre side findes et indeks over afsnit og underordnede sider\nPå hver side i et afsnit, vil der nederst være links til forrige og næste side\nEn søge funktion er tilgængelig i øverste højre hjørne"
  },
  {
    "objectID": "index.html#kommentarer-og-spørgsmål",
    "href": "index.html#kommentarer-og-spørgsmål",
    "title": "R4phd",
    "section": "5 Kommentarer og spørgsmål",
    "text": "5 Kommentarer og spørgsmål\nDet er muligt at efterlade kommentarer, forslag og spørgsmål nederst på hver side – hjælp venligst med til at forbedre indholdet på R4PhD i kommentar felterne:\n\nDu skal bruge en github konto, som kan oprettes gratis og som formentligt vil vise sig nyttig i fremtiden.\nBemærk også, at da siderne her på R4PhD er skrevet parvist på dansk og engelsk, vil kommentarer vises på begge sider – hvis det er muligt så skriv derfor alle kommentarer på engelsk.\n\nVi anbefaler også at bruge Stack Overflow som indgangspunkt til R’s internet samfund (online community) når du får brug for hjælp. Vi har oprettet en Stack Overflow for Teams gruppe specifikt til denne undervisning, men brug bare det overordnede Stack Overflow. Du vil opdage at du nok skal få hjælp dér, meget hurtigt hvis du kan formulere dine spørgsmål klart og tydeligt.\nDet er muligt at oprette en separat konto ved Stack Overflow, men du kan også logge ind dér med den GitHub konto du netop (?) har oprettet. Alternativt kan du også logge en med en Google eller Facebook konto.\nVi har (indtil videre) besluttet, at bruge Stack Overflow for Teams som platform for kommentarer og spørgsmål.\nDet er muligt at oprette en konto ved Stack Overflow, eller at logge ind med en Google, Github eller Facebook konto, hvis man har sådan én i forvejen."
  },
  {
    "objectID": "index_en.html#welcome-to-r4phd",
    "href": "index_en.html#welcome-to-r4phd",
    "title": "R4phd",
    "section": "1 Welcome to R4phd",
    "text": "1 Welcome to R4phd\nThe idea behind this webpage was to form the basis for regular classroom teaching of R, RStudio and the R ecosystem. Primarily with Ph.D. courses based at the University of Southern Denmak in mind.\nYou will find a plethora of guides, examples, videos and FAQs on the internet, but it can be difficult to naviagte and it is not structured for classroom teaching.\n\nYou can start by looking at the table of content in the collapsable menu (top-left hand corner).\n\n\n\n\n\n\nHow to use this website\n\n\n\n\n\n\n2 Operating system – Windows, MacOS or Linux?\nThe teaching material on this site was prepared mainly on a Linux computer.\nIf you use Microsoft Windows or Apple MacOS you should expect things to look sightly different here, from how they appear on your own screen.\nIt should not give rise to any important issues however, as R and RStudio work very well and almost identically on all three operating systems. None-the-less, where I am aware of any real differences between the operating systems, I will illustrate it using three tabs in the following way (click the relevant tab):\n\nWindowsMacOSLinux\n\n\n…Windows specific content\n\n\n…MacOS specific content\n\n\n…Linux specific content\n\n\n\n\n\n3 Exercises\nOn occasion you will find small exercises in collapsible boxes, like this:\n(Click the collapsible box below):\n\n\n\n\n\n\nExercise #1\n\n\n\n\n\nIf there are important differences between Windows, MacOS and Linux, you can find the information relevant to you:\n\nIn a separate window marked by a warning-triangle\nIn one of three tabs marked with the operating system\nOn a postcard on the fridge in the canteen\n\n\n\n\n… and similarly, the solution will be found in a collapsible box:\n\n\n\n\n\n\nSolution to exercise #1\n\n\n\n\n\n\nIn a separate window marked by a warning-triangle\nIn one of three tabs marked with the operating system\nOn a postcard on the fridge in the canteen\n\n\n\n\n\n\n4 Navigation\nThere are several ways to navigate between pages:\n\nIn the left-hand side, you will find a table of content of pages by category\nAt the end of every page in a section, you will find links to the preceding and following pages.\nA search function is available in the top-right hand corner\n\n\n\n5 Comments and questions\nIt is possible to leave comments, suggestions and questions at the end of each page – please help improve the R4PhD content by doing so:\n\nYou will need a github account, which can be created free of charge and which will probably come in handy at later time.\nAlso note, that as pages on the R4PhD site are paired in English and Danish, comments will appear on both pages – stick to English if possible.\n\nWe also recommend using Stack Overflow as great starting point for getting support when you run into trouble. We have created a Stack Overflow for Teams group specifically for this class but, by all means, use the general Stack Overflow community – you will find help is forthcoming very quickly, if you can word your questions succinctly.\nIt is possible to create a separate account in Stack Overflow, or you can just log in using the GitHub account you just created (?) or alternatively a Google or Facebook account."
  },
  {
    "objectID": "index_en.html#operating-system-windows-macos-or-linux",
    "href": "index_en.html#operating-system-windows-macos-or-linux",
    "title": "R4phd",
    "section": "2 Operating system – Windows, MacOS or Linux?",
    "text": "2 Operating system – Windows, MacOS or Linux?\nThe teaching material on this site was prepared mainly on a Linux computer.\nIf you use Microsoft Windows or Apple MacOS you should expect things to look sightly different here, from how they appear on your own screen.\nIt should not give rise to any important issues however, as R and RStudio work very well and almost identically on all three operating systems. None-the-less, where I am aware of any real differences between the operating systems, I will illustrate it using three tabs in the following way (click the relevant tab):\n\nWindowsMacOSLinux\n\n\n…Windows specific content\n\n\n…MacOS specific content\n\n\n…Linux specific content"
  },
  {
    "objectID": "index_en.html#exercises",
    "href": "index_en.html#exercises",
    "title": "R4phd",
    "section": "3 Exercises",
    "text": "3 Exercises\nOn occasion you will find small exercises in collapsible boxes, like this:\n(Click the collapsible box below):\n\n\n\n\n\n\nExercise #1\n\n\n\n\n\nIf there are important differences between Windows, MacOS and Linux, you can find the information relevant to you:\n\nIn a separate window marked by a warning-triangle\nIn one of three tabs marked with the operating system\nOn a postcard on the fridge in the canteen\n\n\n\n\n… and similarly, the solution will be found in a collapsible box:\n\n\n\n\n\n\nSolution to exercise #1\n\n\n\n\n\n\nIn a separate window marked by a warning-triangle\nIn one of three tabs marked with the operating system\nOn a postcard on the fridge in the canteen"
  },
  {
    "objectID": "index_en.html#navigation",
    "href": "index_en.html#navigation",
    "title": "R4phd",
    "section": "4 Navigation",
    "text": "4 Navigation\nThere are several ways to navigate between pages:\n\nIn the left-hand side, you will find a table of content of pages by category\nAt the end of every page in a section, you will find links to the preceding and following pages.\nA search function is available in the top-right hand corner"
  },
  {
    "objectID": "index_en.html#comments-and-questions",
    "href": "index_en.html#comments-and-questions",
    "title": "R4phd",
    "section": "5 Comments and questions",
    "text": "5 Comments and questions\nIt is possible to leave comments, suggestions and questions at the end of each page – please help improve the R4PhD content by doing so:\n\nYou will need a github account, which can be created free of charge and which will probably come in handy at later time.\nAlso note, that as pages on the R4PhD site are paired in English and Danish, comments will appear on both pages – stick to English if possible.\n\nWe also recommend using Stack Overflow as great starting point for getting support when you run into trouble. We have created a Stack Overflow for Teams group specifically for this class but, by all means, use the general Stack Overflow community – you will find help is forthcoming very quickly, if you can word your questions succinctly.\nIt is possible to create a separate account in Stack Overflow, or you can just log in using the GitHub account you just created (?) or alternatively a Google or Facebook account."
  },
  {
    "objectID": "installation_background_da.html",
    "href": "installation_background_da.html",
    "title": "R versus RStudio",
    "section": "",
    "text": "Selve R er et kodesprog og udviklingsmiljø som er særligt velegnet til statistik og data-science.\nR kode ser eksempelvis sådan her ud:\n\nmine_nye_data &lt;- read.csv(\"data_mappe/min_data_fil.csv\")\nmine_nye_data &lt;- mine_nye_data %&gt;%\n  select(-cpr_nummer)\nantal_observationer &lt;- mine_nye_data %&gt;% nrow()\nmin_fine_graf &lt;- mine_nye_data %&gt;% ggplot() + geom_histogram()\n\nR er med andre ord det kode sprog du bruger til indlæse og rense dine data, definere dine analyser, generere dine tabeller og grafer, osv, osv.\n\n\n\nDerimod er RStudio et grafisk program som ‘bare’ gør det nemmere at arbejde med R. Det er egentligt ikke nødvendigt at bruge RStudio, men der er en god grund til at næste alle R-brugere gør det.\nRStudio ser eksempelvis sådan her ud:\n\n\n\nScreenshot af RStudio som det så ud mens jeg sad og skrev denne webside … det kan man nemlig også bruge R-økosystemet til :-)\n\n\n\n\n\nR økosystemet er et veritabelt overflødighedshorn af ekstra funktionalitet som kan lægges over på selve R. Det kommer først og fremmest i form af R pakker, som der findes mange tusinde af, men det er også vejledninger, youTube videoer, chat-fora og meget andet. Uanset hvilke problemer du kommer ud for på din R rejse, kan du være næste 100% sikker på at nogen allerede har beskrevet løsningen … den ligger allerede klar til dig derude i R økosystemet.\nMen før vi kaster os over alt det, så skal vi altså først have installeret R."
  },
  {
    "objectID": "installation_background_da.html#r-mig-her-og-r-mig-der",
    "href": "installation_background_da.html#r-mig-her-og-r-mig-der",
    "title": "R versus RStudio",
    "section": "",
    "text": "Selve R er et kodesprog og udviklingsmiljø som er særligt velegnet til statistik og data-science.\nR kode ser eksempelvis sådan her ud:\n\nmine_nye_data &lt;- read.csv(\"data_mappe/min_data_fil.csv\")\nmine_nye_data &lt;- mine_nye_data %&gt;%\n  select(-cpr_nummer)\nantal_observationer &lt;- mine_nye_data %&gt;% nrow()\nmin_fine_graf &lt;- mine_nye_data %&gt;% ggplot() + geom_histogram()\n\nR er med andre ord det kode sprog du bruger til indlæse og rense dine data, definere dine analyser, generere dine tabeller og grafer, osv, osv.\n\n\n\nDerimod er RStudio et grafisk program som ‘bare’ gør det nemmere at arbejde med R. Det er egentligt ikke nødvendigt at bruge RStudio, men der er en god grund til at næste alle R-brugere gør det.\nRStudio ser eksempelvis sådan her ud:\n\n\n\nScreenshot af RStudio som det så ud mens jeg sad og skrev denne webside … det kan man nemlig også bruge R-økosystemet til :-)\n\n\n\n\n\nR økosystemet er et veritabelt overflødighedshorn af ekstra funktionalitet som kan lægges over på selve R. Det kommer først og fremmest i form af R pakker, som der findes mange tusinde af, men det er også vejledninger, youTube videoer, chat-fora og meget andet. Uanset hvilke problemer du kommer ud for på din R rejse, kan du være næste 100% sikker på at nogen allerede har beskrevet løsningen … den ligger allerede klar til dig derude i R økosystemet.\nMen før vi kaster os over alt det, så skal vi altså først have installeret R."
  },
  {
    "objectID": "installation_background_en.html",
    "href": "installation_background_en.html",
    "title": "R versus RStudio",
    "section": "",
    "text": "R itself is a coding language and development environment which is particularly well suited for statistical analyses and data science.\nR code might for example look like this:\n\nmy_new_data &lt;- read.csv(\"data_folder/my_data_file.csv\")\nmy_new_data &lt;- my_new_data %&gt;%\n  select(-cpr_nummer)\nnumber_of_observations &lt;- my_new_data %&gt;% nrow()\nmy_fancy_plot &lt;- my_new_data %&gt;% ggplot() + geom_histogram()\n\nIn other words, R is the code you use to read data, clean and wrangle data, define analyses, generate plots and tables, etc.\n\n\n\nRStudio, on the other hand, is ‘just’ a graphical user interface which makes it easier to work in R. It is, in fact, perfectly possible to do without RStudio, but there are good reasons why most R users use it.\nRStudio might for instance look like this:\n\n\n\nScreenshot of RStudio as it appeared when I was creating this website … you see, it is possible to that in the R ecosystem as well :-)\n\n\n\n\n\nThe R ecosystem, is a veritable plethora of extra functionality that can be added on to of R itself. This is first and foremost in the form of R packages, of which there are many thousands, but it also includes online guides, youTube videos, chat-forums, etc. No matter what problems you encounter on your R journey, you can be almost 100% certain that some has found a solution already … it is already prepared for you, out there in the R ecosystem.\nBut before we get started with all of that, we have to install R."
  },
  {
    "objectID": "installation_background_en.html#r-here-there-and-everywhere",
    "href": "installation_background_en.html#r-here-there-and-everywhere",
    "title": "R versus RStudio",
    "section": "",
    "text": "R itself is a coding language and development environment which is particularly well suited for statistical analyses and data science.\nR code might for example look like this:\n\nmy_new_data &lt;- read.csv(\"data_folder/my_data_file.csv\")\nmy_new_data &lt;- my_new_data %&gt;%\n  select(-cpr_nummer)\nnumber_of_observations &lt;- my_new_data %&gt;% nrow()\nmy_fancy_plot &lt;- my_new_data %&gt;% ggplot() + geom_histogram()\n\nIn other words, R is the code you use to read data, clean and wrangle data, define analyses, generate plots and tables, etc.\n\n\n\nRStudio, on the other hand, is ‘just’ a graphical user interface which makes it easier to work in R. It is, in fact, perfectly possible to do without RStudio, but there are good reasons why most R users use it.\nRStudio might for instance look like this:\n\n\n\nScreenshot of RStudio as it appeared when I was creating this website … you see, it is possible to that in the R ecosystem as well :-)\n\n\n\n\n\nThe R ecosystem, is a veritable plethora of extra functionality that can be added on to of R itself. This is first and foremost in the form of R packages, of which there are many thousands, but it also includes online guides, youTube videos, chat-forums, etc. No matter what problems you encounter on your R journey, you can be almost 100% certain that some has found a solution already … it is already prepared for you, out there in the R ecosystem.\nBut before we get started with all of that, we have to install R."
  },
  {
    "objectID": "installation_cloud_da.html",
    "href": "installation_cloud_da.html",
    "title": "Posit Cloud",
    "section": "",
    "text": "VIGTIGT\n\n\n\nFirmaet Posit som står bag RStudio (og rigtigt mange R pakker), tilbyder også en online version af RStudio og R økosystemet, som hedder Posit Cloud.\n\nPosit Cloud (formerly RStudio Cloud) lets you access Posit’s powerful set of data science tools right in your browser – no installation or complex configuration required.\n\nDe tilbyder endda en gratis version med visse begrænsninger. Men i udgangspunktet anbefaler vi at du installerer R, RStudio, etc på din egen computer med mindre der er helt særlige grunde til at vælge cloud løsningen."
  },
  {
    "objectID": "installation_cloud_en.html",
    "href": "installation_cloud_en.html",
    "title": "Posit Cloud",
    "section": "",
    "text": "Important\n\n\n\nThe company Posit which develops RStudio (and a great many R packages), also offer an online version of RStudio and the R ecosystem, called Posit Cloud.\n\nPosit Cloud (formerly RStudio Cloud) lets you access Posit’s powerful set of data science tools right in your browser – no installation or complex configuration required.\n\nThey even offer a free (as in free beer) version with some limitations. However, we recommend you install R, RStudio, etc on your own computer unless there are very specific reasons to choose a cloud hosted solution."
  },
  {
    "objectID": "installation_ecosystem_da.html",
    "href": "installation_ecosystem_da.html",
    "title": "The R ecosystem",
    "section": "",
    "text": "R-økosystemet består af rigtigt mange separate programmer der på dynamisk vis kan hentes ned fra internettet og kombineres for at give nye funktioner: Alt fra simpel data manipulation til dynamiske hjemmesider, grafiske animationer og meget mere.\nVi får kun brug for tre af disse elementer:\n\nSelve R som er et udviklingsmiljø (kodesprog) til data-science og statistik\nRStudio som er et grafisk program til at arbejde med R kode\nEn mindre gruppe af R pakker med ekstra funktionalitet\n\nPå de næste sider vil jeg gennemgå hvordan elementerne installeres, et ad gangen."
  },
  {
    "objectID": "installation_ecosystem_da.html#r-økosystemet",
    "href": "installation_ecosystem_da.html#r-økosystemet",
    "title": "The R ecosystem",
    "section": "",
    "text": "R-økosystemet består af rigtigt mange separate programmer der på dynamisk vis kan hentes ned fra internettet og kombineres for at give nye funktioner: Alt fra simpel data manipulation til dynamiske hjemmesider, grafiske animationer og meget mere.\nVi får kun brug for tre af disse elementer:\n\nSelve R som er et udviklingsmiljø (kodesprog) til data-science og statistik\nRStudio som er et grafisk program til at arbejde med R kode\nEn mindre gruppe af R pakker med ekstra funktionalitet\n\nPå de næste sider vil jeg gennemgå hvordan elementerne installeres, et ad gangen."
  },
  {
    "objectID": "installation_ecosystem_da.html#en-bemærkning-om-free-and-open-source-software-foss",
    "href": "installation_ecosystem_da.html#en-bemærkning-om-free-and-open-source-software-foss",
    "title": "The R ecosystem",
    "section": "2 En bemærkning om “Free and Open Source Software” (FOSS)",
    "text": "2 En bemærkning om “Free and Open Source Software” (FOSS)\nR-økosystemet er udviklet og frigivet som Free and Open Source Software og er som sådan frit og gratis tilgængeligt på internettet.\nDet er en kæmpe fordel. Ikke bare på grund af prisen (gratis), men i høj grad også af principielle årsager … principper som burde være af særlig betydning for en forsker … og det opfordres du hermed til at læse lidt mere her:\n\n\n\n\n\n\nMere om FOSS? Klik her!\n\n\n\n\n\nFree and Open Source software udvikles efter de samme grundlæggende principper som den videnskabelige proces: viden (software) udvikles og offentliggøres på en åben og gennemsigtig måde, som gør det muligt for alle at undersøge, kritisere og forbedre resultatet, og at videre-udvikle derpå.\nDet står i kontrast til lukkede og proprietære udviklingsprocesser hvor viden (software) holdes skjult i lukkede formater der forhindrer uafhængig kritisk gennemsyn, men til gengæld understøtter en lukrativ forretningsmodel.\nHvis du vil vide mere, kan du nemt finde information derom på internettet … altså det internet som næsten udelukkende er baseret open source software.\nHvis du i dit forskningsbudget har afsat midler til indkøb af IT udstyr og software, kan du jo overveje at donere et beløb du finder passende til f.eks R projektet."
  },
  {
    "objectID": "installation_ecosystem_en.html",
    "href": "installation_ecosystem_en.html",
    "title": "The R ecosystem",
    "section": "",
    "text": "The R-ecosystem consists of a lot of separate programs which can be downloaded fromthe internet and dynamically combined to provide extra functionality: This encompasses everything from simple data manipulation to the creation of dynamic websites, graphical animations and much more.\nWe will only be using three elements:\n\nR itself, which is a development environment (coding language) for data-science and statistics\nRStudio which is a graphical interface with which to work in R code\nA smaller sample of R packages with extra functionality\n\nIn the following pages, I will guide you to the installation of these three eleents - one at a time."
  },
  {
    "objectID": "installation_ecosystem_en.html#the-r-ecosystem",
    "href": "installation_ecosystem_en.html#the-r-ecosystem",
    "title": "The R ecosystem",
    "section": "",
    "text": "The R-ecosystem consists of a lot of separate programs which can be downloaded fromthe internet and dynamically combined to provide extra functionality: This encompasses everything from simple data manipulation to the creation of dynamic websites, graphical animations and much more.\nWe will only be using three elements:\n\nR itself, which is a development environment (coding language) for data-science and statistics\nRStudio which is a graphical interface with which to work in R code\nA smaller sample of R packages with extra functionality\n\nIn the following pages, I will guide you to the installation of these three eleents - one at a time."
  },
  {
    "objectID": "installation_ecosystem_en.html#a-note-about-free-and-open-source-software-foss",
    "href": "installation_ecosystem_en.html#a-note-about-free-and-open-source-software-foss",
    "title": "The R ecosystem",
    "section": "2 A note about “Free and Open Source Software” (FOSS)",
    "text": "2 A note about “Free and Open Source Software” (FOSS)\nThe R-ecosystem is developed and released as Free and Open Source Software and as such it is freely available to download from the internet at no monetary cost.\nThat is a good thing! Not just because of the price tag (free as in ‘free beer’), but most definitely also on principle (free as in ‘free speech’) … principles, which ought to be of particular importance to researcher … and you are herewith urged to read more below:\n\n\n\n\n\n\nMore about FOSS? Click here!\n\n\n\n\n\nFree and Open Source software is developed according to the same principles as the scietific proces; knowledge (software) is developed and released in an open and transparent manner, which allows everyone to examine, criticize and improve on the results, and to develope it further.\nThis is in contrast to closed and proprietary development processes where knowledge (software) is kept hidden behind closed formats which prevent external review, but allows for a profitable business.\nIf you want to know more, you can easily find a lot information about it on the internet … that is, the internet which runs almost exclusively on open source software.\nIf you have funds set aside within your research budget for software and computer equipment, you might consider donating an amount that you find appropriate to e.g. the R projektet."
  },
  {
    "objectID": "installation_prerequisites_da.html",
    "href": "installation_prerequisites_da.html",
    "title": "Prerequisites",
    "section": "",
    "text": "…du får brug for en computer, ja du gør.\n\nEn nogenlunde moderne computer\n\nTilstrækkeligt med plads (+500 Mb) på din harddisk til installationen\nTilstrækkeligt med RAM (+1 Gb) - jo mere, jo bedre\n\nEt nogenlunde moderne styresystem\n\nLinux (Ubuntu 18+, Debian 9+, OpenSuse 15+, Fedora 19+, Redhat 7+, etc)\nWindows 10+\nMacOS10.15+\n\nEn fungerende internetforbindelse\n\n\n\n\n\n\n\nSådan kan du finde information om din computer\n\n\n\n\n\n\nWindowsMacOSLinux\n\n\nWindows 10\nWindows 10\n\n\n…MacOS specifikt indhold\n\n\n\n\nRun the following in a terminal, to get information about your operating system (uname), your hardware (lscpu) and disk space (df):\n$ uname -a\n$ lscpu\n$ df -h\n\n\n\nRun the following in a terminal, to get information about your operating system (hostnamectl), your hardware (lscpu) and disk space (df):\n$ hostnamectl\n$ lscpu\n$ df -h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEr din computer gammel?\n\n\n\n\n\nHvis din computer er af ældre dato, vil det absolut være tilrådeligt at sikre dig personlig hjælp til installation i god tid før du deltager i et R-kursus.\nEllers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\nR-økosystemet er konstant i udvikling og der kommer hele tiden nye funktioner til som du vil gå glip af med en ældre installation.\nIkke fordi din computer absolut skal være sprit ny, men er du i tvivl, så kontakt underviserne i god tid og spørg dem til råds.\nAktuelt (sommeren 2022) vil jeg anbefale at du bruger R version 4.x.x og RStudio version 2022.x.x\n\n\n\n\n\n\n\n\n\nEr din computer en SDU-computer?\n\n\n\n\n\nVær særligt opmærksom på at den lokale IT afdeling på regionens sygehuse og universiteterne kan have lagt begrænsinger på dine muligheder for at installere programmer på din arbejdscomputer:\n\nEr der spærret for adgangen til hjemmesider eller download af programfiler?\nKræver det særlige rettigheder at installere programmer på din computer?\n\nHvis det er tilfældet kan det gøre det sværere at installere eksempelvis R på din computer.\nDet er en god idé at få styr på det før du sidder til undervisning. Igen fordi du ellers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\n…og vi (underviserne) kan hjælpe dig med R-økosystemet, men ikke nødvendigvis med din computer eller dit styresystem.\n\n\n\n\n\n\n\n\n\nEr din computer en SLB-computer?\n\n\n\n\n\nVær særligt opmærksom på at den lokale IT afdeling på regionens sygehuse og universiteterne kan have lagt begrænsinger på dine muligheder for at installere programmer på din arbejdscomputer:\n\nEr der spærret for adgangen til hjemmesider eller download af programfiler?\nKræver det særlige rettigheder at installere programmer på din computer?\n\nHvis det er tilfældet kan det gøre det sværere at installere eksempelvis R på din computer.\nDet er en god idé at få styr på det før du sidder til undervisning. Igen fordi du ellers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\n…og vi (underviserne) kan hjælpe dig med R-økosystemet, men ikke nødvendigvis med din computer eller dit styresystem.\n\n\n\n\n\n\n\n\n\nEr din computer en OUH-computer?\n\n\n\n\n\ntekst"
  },
  {
    "objectID": "installation_prerequisites_da.html#forudsætninger",
    "href": "installation_prerequisites_da.html#forudsætninger",
    "title": "Prerequisites",
    "section": "",
    "text": "…du får brug for en computer, ja du gør.\n\nEn nogenlunde moderne computer\n\nTilstrækkeligt med plads (+500 Mb) på din harddisk til installationen\nTilstrækkeligt med RAM (+1 Gb) - jo mere, jo bedre\n\nEt nogenlunde moderne styresystem\n\nLinux (Ubuntu 18+, Debian 9+, OpenSuse 15+, Fedora 19+, Redhat 7+, etc)\nWindows 10+\nMacOS10.15+\n\nEn fungerende internetforbindelse\n\n\n\n\n\n\n\nSådan kan du finde information om din computer\n\n\n\n\n\n\nWindowsMacOSLinux\n\n\nWindows 10\nWindows 10\n\n\n…MacOS specifikt indhold\n\n\n\n\nRun the following in a terminal, to get information about your operating system (uname), your hardware (lscpu) and disk space (df):\n$ uname -a\n$ lscpu\n$ df -h\n\n\n\nRun the following in a terminal, to get information about your operating system (hostnamectl), your hardware (lscpu) and disk space (df):\n$ hostnamectl\n$ lscpu\n$ df -h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEr din computer gammel?\n\n\n\n\n\nHvis din computer er af ældre dato, vil det absolut være tilrådeligt at sikre dig personlig hjælp til installation i god tid før du deltager i et R-kursus.\nEllers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\nR-økosystemet er konstant i udvikling og der kommer hele tiden nye funktioner til som du vil gå glip af med en ældre installation.\nIkke fordi din computer absolut skal være sprit ny, men er du i tvivl, så kontakt underviserne i god tid og spørg dem til råds.\nAktuelt (sommeren 2022) vil jeg anbefale at du bruger R version 4.x.x og RStudio version 2022.x.x\n\n\n\n\n\n\n\n\n\nEr din computer en SDU-computer?\n\n\n\n\n\nVær særligt opmærksom på at den lokale IT afdeling på regionens sygehuse og universiteterne kan have lagt begrænsinger på dine muligheder for at installere programmer på din arbejdscomputer:\n\nEr der spærret for adgangen til hjemmesider eller download af programfiler?\nKræver det særlige rettigheder at installere programmer på din computer?\n\nHvis det er tilfældet kan det gøre det sværere at installere eksempelvis R på din computer.\nDet er en god idé at få styr på det før du sidder til undervisning. Igen fordi du ellers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\n…og vi (underviserne) kan hjælpe dig med R-økosystemet, men ikke nødvendigvis med din computer eller dit styresystem.\n\n\n\n\n\n\n\n\n\nEr din computer en SLB-computer?\n\n\n\n\n\nVær særligt opmærksom på at den lokale IT afdeling på regionens sygehuse og universiteterne kan have lagt begrænsinger på dine muligheder for at installere programmer på din arbejdscomputer:\n\nEr der spærret for adgangen til hjemmesider eller download af programfiler?\nKræver det særlige rettigheder at installere programmer på din computer?\n\nHvis det er tilfældet kan det gøre det sværere at installere eksempelvis R på din computer.\nDet er en god idé at få styr på det før du sidder til undervisning. Igen fordi du ellers risikerer du at bruge al din undervisningstid på at kæmpe med computeren i stedet for at lege med R.\n…og vi (underviserne) kan hjælpe dig med R-økosystemet, men ikke nødvendigvis med din computer eller dit styresystem.\n\n\n\n\n\n\n\n\n\nEr din computer en OUH-computer?\n\n\n\n\n\ntekst"
  },
  {
    "objectID": "installation_prerequisites_en.html",
    "href": "installation_prerequisites_en.html",
    "title": "Prerequisites",
    "section": "",
    "text": "You’r going to need a computer …\n\nA somewhat modern computer\n\nSufficient storage (+500 Mb) on your harddisk for the installation\nSufficient memory (+1 Gb) - the more, the better\n\nA somehwat modern operating system\n\nLinux (Ubuntu 18+, Debian 9+, OpenSuse 15+, Fedora 19+, Redhat 7+, etc)\nWindows 10+\nMacOS10.15+\n\nA working internet connection\n\n\n\n\n\n\n\nHow to find the information about your computer\n\n\n\n\n\n\nWindowsMacOSLinux\n\n\nWindows 10\nWindows 10\n\n\n…MacOS specific content\n\n\n\n\nRun the following in a terminal, to get information about your operating system (uname), your hardware (lscpu) and disk space (df):\n$ uname -a\n$ lscpu\n$ df -h\n\n\n\nRun the following in a terminal, to get information about your operating system (hostnamectl), your hardware (lscpu) and disk space (df):\n$ hostnamectl\n$ lscpu\n$ df -h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs you computer an older model?\n\n\n\n\n\nIf your computer is an older model, we recomment that you get someone to help you install R well in time before the R-course.\nOtherwise, you risk spending all your class time wrangling your computer instead of playing with R.\nThe R-ecosystem is constantly developing and new functionality is added all the time, which may be unavailable to you with an older R installation.\nYour computer doesn’t have to be brand spanking new, but if in doubt, contact the teachers before the R course starts.\nAt the time of writting (summer 2022) we reommend you use R version4.x.x and RStudio version 2022.x.x\n\n\n\n\n\n\n\n\n\nWas your computer supplied by SDU?\n\n\n\n\n\nBe aware that the local IT department on the Regional Hospitals and the Universiy may impose certain restrictions on your ability to install software on your computer:\n\nAccess to some webpages (e.g. CRAN) may be restricted, as may access to download some files from the internet.\nInstallation of software may require particular administrative rights which you do not have as standard.\n\nIf this is the case, it will impede and slow down your installation of R.\nIt is therefor a good idea, to get all of this sorted out before the start of classes. Again, otherwise you risk spending all your class time wrnagling your computer rather than playing with R.\n…and we (the teacher) will gladly help you with the R-ecosystem, but not necessarily your computer or your operating system.\n\n\n\n\n\n\n\n\n\nWas your computer supplied by SLB?\n\n\n\n\n\nBe aware that the local IT department on the Regional Hospitals and the Universiy may impose certain restrictions on your ability to install software on your computer:\n\nAccess to some webpages (e.g. CRAN) may be restricted, as may access to download some files from the internet.\nInstallation of software may require particular administrative rights which you do not have as standard.\n\nIf this is the case, it will impede and slow down your installation of R.\nIt is therefor a good idea, to get all of this sorted out before the start of classes. Again, otherwise you risk spending all your class time wrnagling your computer rather than playing with R.\n…and we (the teacher) will gladly help you with the R-ecosystem, but not necessarily your computer or your operating system.\n\n\n\n\n\n\n\n\n\nWas your computer supplied by OUH?\n\n\n\n\n\ntext"
  },
  {
    "objectID": "installation_prerequisites_en.html#prerequisites",
    "href": "installation_prerequisites_en.html#prerequisites",
    "title": "Prerequisites",
    "section": "",
    "text": "You’r going to need a computer …\n\nA somewhat modern computer\n\nSufficient storage (+500 Mb) on your harddisk for the installation\nSufficient memory (+1 Gb) - the more, the better\n\nA somehwat modern operating system\n\nLinux (Ubuntu 18+, Debian 9+, OpenSuse 15+, Fedora 19+, Redhat 7+, etc)\nWindows 10+\nMacOS10.15+\n\nA working internet connection\n\n\n\n\n\n\n\nHow to find the information about your computer\n\n\n\n\n\n\nWindowsMacOSLinux\n\n\nWindows 10\nWindows 10\n\n\n…MacOS specific content\n\n\n\n\nRun the following in a terminal, to get information about your operating system (uname), your hardware (lscpu) and disk space (df):\n$ uname -a\n$ lscpu\n$ df -h\n\n\n\nRun the following in a terminal, to get information about your operating system (hostnamectl), your hardware (lscpu) and disk space (df):\n$ hostnamectl\n$ lscpu\n$ df -h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs you computer an older model?\n\n\n\n\n\nIf your computer is an older model, we recomment that you get someone to help you install R well in time before the R-course.\nOtherwise, you risk spending all your class time wrangling your computer instead of playing with R.\nThe R-ecosystem is constantly developing and new functionality is added all the time, which may be unavailable to you with an older R installation.\nYour computer doesn’t have to be brand spanking new, but if in doubt, contact the teachers before the R course starts.\nAt the time of writting (summer 2022) we reommend you use R version4.x.x and RStudio version 2022.x.x\n\n\n\n\n\n\n\n\n\nWas your computer supplied by SDU?\n\n\n\n\n\nBe aware that the local IT department on the Regional Hospitals and the Universiy may impose certain restrictions on your ability to install software on your computer:\n\nAccess to some webpages (e.g. CRAN) may be restricted, as may access to download some files from the internet.\nInstallation of software may require particular administrative rights which you do not have as standard.\n\nIf this is the case, it will impede and slow down your installation of R.\nIt is therefor a good idea, to get all of this sorted out before the start of classes. Again, otherwise you risk spending all your class time wrnagling your computer rather than playing with R.\n…and we (the teacher) will gladly help you with the R-ecosystem, but not necessarily your computer or your operating system.\n\n\n\n\n\n\n\n\n\nWas your computer supplied by SLB?\n\n\n\n\n\nBe aware that the local IT department on the Regional Hospitals and the Universiy may impose certain restrictions on your ability to install software on your computer:\n\nAccess to some webpages (e.g. CRAN) may be restricted, as may access to download some files from the internet.\nInstallation of software may require particular administrative rights which you do not have as standard.\n\nIf this is the case, it will impede and slow down your installation of R.\nIt is therefor a good idea, to get all of this sorted out before the start of classes. Again, otherwise you risk spending all your class time wrnagling your computer rather than playing with R.\n…and we (the teacher) will gladly help you with the R-ecosystem, but not necessarily your computer or your operating system.\n\n\n\n\n\n\n\n\n\nWas your computer supplied by OUH?\n\n\n\n\n\ntext"
  },
  {
    "objectID": "installation_quick_preparation_da.html",
    "href": "installation_quick_preparation_da.html",
    "title": "Getting ready for your R course",
    "section": "",
    "text": "En egnet computer\nEn fungerende installation af R\nEn fungerende installation af RStudio\nEt antal R pakker installeret\n\nPå de næste sider, hjælper vi dig igennem punkterne, et af gangen."
  },
  {
    "objectID": "installation_quick_preparation_da.html#du-får-brug-for-følgende",
    "href": "installation_quick_preparation_da.html#du-får-brug-for-følgende",
    "title": "Getting ready for your R course",
    "section": "",
    "text": "En egnet computer\nEn fungerende installation af R\nEn fungerende installation af RStudio\nEt antal R pakker installeret\n\nPå de næste sider, hjælper vi dig igennem punkterne, et af gangen."
  },
  {
    "objectID": "installation_quick_preparation_en.html",
    "href": "installation_quick_preparation_en.html",
    "title": "Getting ready for your R course",
    "section": "",
    "text": "A suitable computer\nA working installation of R\nA working installation of RStudio\nA number of R packages\n\nIn the following pages, we will guide your through each of these steps."
  },
  {
    "objectID": "installation_quick_preparation_en.html#what-you-will-need",
    "href": "installation_quick_preparation_en.html#what-you-will-need",
    "title": "Getting ready for your R course",
    "section": "",
    "text": "A suitable computer\nA working installation of R\nA working installation of RStudio\nA number of R packages\n\nIn the following pages, we will guide your through each of these steps."
  },
  {
    "objectID": "installation_rstudio_da.html",
    "href": "installation_rstudio_da.html",
    "title": "RStudio installation",
    "section": "",
    "text": "SDUAndre\n\n\nInstallér RStudio via SDU ITs Software Center.\n\n\nDu finder RStudio installations programmet til dit styre system på RStudios hjemmeside\n\n\nDer er fire forskellige programmer du kan hente ned til din computer – sørg for at du henter den som hedder RStudio Desktop Open Source License Free. Klik på den blå ‘DOWNLOAD’ knap.\nIllustration af download link’et fra RStudios hjemmeside:\n\n\n\nDette er en illustration og ikke et aktivt link til download – følg i stedet linket herover.\n\n\n\n\n\n\n\n\nVigtigt\n\n\n\nVælg det rigtige link: yderst til venstre ‘RStudio Desktop Open Source License Free’.\n\n\n\n\n\nDu bliver nu præsenteret for flere muligheder programmer – sørg for at vælge det program som passer til dit styresystem (klik på det blå tekst link i kolonnen ‘Download’).\nIllustration af download link’et fra RStudios hjemmeside:\n\n\n\nDette er en illustration og ikke et aktivt link til download – følg i stedet linket herover.\n\n\n\n\n\n\n\n\nVigtigt\n\n\n\nVælg det rigtige link i kolonnen ’Download: Windows, MacOS eller Linux.\n\n\nInstallér derpå programmet som vanligt for dit styresystem."
  },
  {
    "objectID": "installation_rstudio_da.html#hent-og-installer-rstudio",
    "href": "installation_rstudio_da.html#hent-og-installer-rstudio",
    "title": "RStudio installation",
    "section": "",
    "text": "SDUAndre\n\n\nInstallér RStudio via SDU ITs Software Center.\n\n\nDu finder RStudio installations programmet til dit styre system på RStudios hjemmeside\n\n\nDer er fire forskellige programmer du kan hente ned til din computer – sørg for at du henter den som hedder RStudio Desktop Open Source License Free. Klik på den blå ‘DOWNLOAD’ knap.\nIllustration af download link’et fra RStudios hjemmeside:\n\n\n\nDette er en illustration og ikke et aktivt link til download – følg i stedet linket herover.\n\n\n\n\n\n\n\n\nVigtigt\n\n\n\nVælg det rigtige link: yderst til venstre ‘RStudio Desktop Open Source License Free’.\n\n\n\n\n\nDu bliver nu præsenteret for flere muligheder programmer – sørg for at vælge det program som passer til dit styresystem (klik på det blå tekst link i kolonnen ‘Download’).\nIllustration af download link’et fra RStudios hjemmeside:\n\n\n\nDette er en illustration og ikke et aktivt link til download – følg i stedet linket herover.\n\n\n\n\n\n\n\n\nVigtigt\n\n\n\nVælg det rigtige link i kolonnen ’Download: Windows, MacOS eller Linux.\n\n\nInstallér derpå programmet som vanligt for dit styresystem."
  },
  {
    "objectID": "installation_rstudio_en.html",
    "href": "installation_rstudio_en.html",
    "title": "RStudio installation",
    "section": "",
    "text": "SDUOthers\n\n\nInstall RStudio via SDU ITs Software Center.\n\n\nYou will find the RStudio installation program for your operating system on RStudios website\n\n\nThere are four different programs, that you can download for your computer – make sure, yoiu download the one entitled RStudio Desktop Open Source License Free. Click the blue ‘DOWNLOAD’ button.\nIllustration of the download link from RStudios website:\n\n\n\nThis is an illustration and not an active download link – follow the link provided above to download.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nCHoose the right link now: far left hand side ‘RStudio Desktop Open Source License Free’.\n\n\n\n\n\nYou will now be presented with several download options – make sure yoiu choose the download appropriate for your operating system (click the blue text link in the columnd ‘Download’).\nIllustration of download links from RStudios website:\n\n\n\nThis is an illustration and not an active download link – follow the link provided above to download.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nChoose the right link in the column now ’Download: Windows, MacOS or your Linux distribution.\n\n\nInstall the programme as per usual procedure for your operating system."
  },
  {
    "objectID": "installation_rstudio_en.html#download-and-install-rstudio",
    "href": "installation_rstudio_en.html#download-and-install-rstudio",
    "title": "RStudio installation",
    "section": "",
    "text": "SDUOthers\n\n\nInstall RStudio via SDU ITs Software Center.\n\n\nYou will find the RStudio installation program for your operating system on RStudios website\n\n\nThere are four different programs, that you can download for your computer – make sure, yoiu download the one entitled RStudio Desktop Open Source License Free. Click the blue ‘DOWNLOAD’ button.\nIllustration of the download link from RStudios website:\n\n\n\nThis is an illustration and not an active download link – follow the link provided above to download.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nCHoose the right link now: far left hand side ‘RStudio Desktop Open Source License Free’.\n\n\n\n\n\nYou will now be presented with several download options – make sure yoiu choose the download appropriate for your operating system (click the blue text link in the columnd ‘Download’).\nIllustration of download links from RStudios website:\n\n\n\nThis is an illustration and not an active download link – follow the link provided above to download.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nChoose the right link in the column now ’Download: Windows, MacOS or your Linux distribution.\n\n\nInstall the programme as per usual procedure for your operating system."
  },
  {
    "objectID": "installation_r_da.html",
    "href": "installation_r_da.html",
    "title": "R installation",
    "section": "",
    "text": "SDUWindowsMacOSLinux\n\n\nHvis din computer er udleveret af SDU IT, anbefales det at du installerer R via SDUs Software Center.\nLINK?\n\n\nR kan hentes på internettet fra dette link til CRAN:\n\nNær toppen finder du linket Download R for Windows.\nKlik på linket og download filen.\nNår filen er hentet ned installeres på vanlig vis.\n\n\n\nR kan hentes på internettet fra dette link til CRAN:\n\nNær toppen finder du linket Download R for macOS.\nKlik på linket og download filen.\nNår filen er hentet ned installeres på vanlig vis.\n\n\n\nR er med al sandsynlighed en del af din foretrukne Linux distributions standard software repositorie. Bruger du en Debian baseret distribution, vil det derfor formentligt være så simpelt som:\n\nuser@linux$ sudo apt install r-base\n\nDerforuden kan du med fordel installere følgende andre pakker hvis du vil bruge R til at generere litteratur referencer (pandoc) og/eller PDF filer (texlive) som output.\n\nuser@linux$ sudo apt install pandoc pandoc-citeproc texlive-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-extra texlive-latex-base texlive-latex-extra texlive-latex-recommended texlive-pictures texlive-pstricks texlive-xetex lmodern texlive-lang-european g++ libxml2-dev libcurl4-openssl-dev libssl-dev \n\nBruger du en anden distribution, som ikke er baseret på Debian (f.eks Arch eller Fedora) skal du installere tilsvarende pakker fra deres repositorier med deres pakke håndterings funktioner (yum, rpm, etc)"
  },
  {
    "objectID": "installation_r_da.html#installation",
    "href": "installation_r_da.html#installation",
    "title": "R installation",
    "section": "",
    "text": "SDUWindowsMacOSLinux\n\n\nHvis din computer er udleveret af SDU IT, anbefales det at du installerer R via SDUs Software Center.\nLINK?\n\n\nR kan hentes på internettet fra dette link til CRAN:\n\nNær toppen finder du linket Download R for Windows.\nKlik på linket og download filen.\nNår filen er hentet ned installeres på vanlig vis.\n\n\n\nR kan hentes på internettet fra dette link til CRAN:\n\nNær toppen finder du linket Download R for macOS.\nKlik på linket og download filen.\nNår filen er hentet ned installeres på vanlig vis.\n\n\n\nR er med al sandsynlighed en del af din foretrukne Linux distributions standard software repositorie. Bruger du en Debian baseret distribution, vil det derfor formentligt være så simpelt som:\n\nuser@linux$ sudo apt install r-base\n\nDerforuden kan du med fordel installere følgende andre pakker hvis du vil bruge R til at generere litteratur referencer (pandoc) og/eller PDF filer (texlive) som output.\n\nuser@linux$ sudo apt install pandoc pandoc-citeproc texlive-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-extra texlive-latex-base texlive-latex-extra texlive-latex-recommended texlive-pictures texlive-pstricks texlive-xetex lmodern texlive-lang-european g++ libxml2-dev libcurl4-openssl-dev libssl-dev \n\nBruger du en anden distribution, som ikke er baseret på Debian (f.eks Arch eller Fedora) skal du installere tilsvarende pakker fra deres repositorier med deres pakke håndterings funktioner (yum, rpm, etc)"
  },
  {
    "objectID": "installation_r_da.html#tjek-at-r-er-installeret-og-fungerer",
    "href": "installation_r_da.html#tjek-at-r-er-installeret-og-fungerer",
    "title": "R installation",
    "section": "2 Tjek at R er installeret og fungerer",
    "text": "2 Tjek at R er installeret og fungerer\nHvis installationsprocessen forløb som forventet burde du nu have R installeret på din computer – før vi går videre til at installere RStudio, er det en god ide lige at kontrollere at du nu også har et fungerende R udviklingsmiljø på plads:\n\nWindowsMacOSLinux\n\n\nFor at tjekke om R er installeret skal du først åbne Terminal programmet på din Windows computer:\nÅben Run window dialogen ved at trykke på tasterne Windows + R, i ‘Åben’ feltet i ‘Kør’ vinduet taster du wt (for Windows Terminal) og klikker på OK.\nI Windows Terminal indtaster du nu:\n\n...SKAF BILLEDE FRA EN WINDOWS\n\n\n\nFor at tjekke om R er installeret skal du først åbne Terminal programmet på din Mac computer:\nTerminal kan findes i Utilities under Applications eller du kan trykke Command-space for at åbne Spotlight og indtaste “Terminal” og derpå dobbelt klikke på søge resultatet.\nI MacOS Terminalen indtaster du nu:\n\n...SKAF BILLEDE FRA EN MAC\n\n\n\nÅbn dit favorit command-line interface og afprøve følgende:\n\nuser@linux: R\n\nDit output skulle gerne være noget i stil med:\n\nR version 4.1.2 (2021-11-01) -- \"Bird Hippie\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R."
  },
  {
    "objectID": "installation_r_en.html",
    "href": "installation_r_en.html",
    "title": "R installation",
    "section": "",
    "text": "SDUWindowsMacOSLinux\n\n\nIf your computer was issued by the SDU IT department, you can install R via SDUs Software Center.\nLINK?\n\n\nR can be downloaded from the internet via this link CRAN:\n\nNear the top, you will find the link Download R for Windows.\nClick the link and download hte file\nOnce the file is downloaded, install as per usual procedure\n\n\n\nR can be downloaded from the internet via this link CRAN:\n\nNear the top, you will find the link Download R for MacOS.\nClick the link and download hte file\nOnce the file is downloaded, install as per usual procedure\n\n\n\nR is, in all probablity, already part of your preferred Linux distributions software repositories. If you use a Debian based distribution, it should be as simple as::\n\nuser@linux$ sudo apt install r-base\n\nIf you want to generate literature references (pandoc) and/or generate PDF output (texlive), you probably also want the following software installed:\n\nuser@linux$ sudo apt install pandoc pandoc-citeproc texlive-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-extra texlive-latex-base texlive-latex-extra texlive-latex-recommended texlive-pictures texlive-pstricks texlive-xetex lmodern texlive-lang-european g++ libxml2-dev libcurl4-openssl-dev libssl-dev \n\nIf you are using another distribution (Arch, Red Hat, etc) you simply need to install the same software using their package managers (yum, rpm, etc)\n\n\n\nYou will find a video guide to R installation"
  },
  {
    "objectID": "installation_r_en.html#installation",
    "href": "installation_r_en.html#installation",
    "title": "R installation",
    "section": "",
    "text": "SDUWindowsMacOSLinux\n\n\nIf your computer was issued by the SDU IT department, you can install R via SDUs Software Center.\nLINK?\n\n\nR can be downloaded from the internet via this link CRAN:\n\nNear the top, you will find the link Download R for Windows.\nClick the link and download hte file\nOnce the file is downloaded, install as per usual procedure\n\n\n\nR can be downloaded from the internet via this link CRAN:\n\nNear the top, you will find the link Download R for MacOS.\nClick the link and download hte file\nOnce the file is downloaded, install as per usual procedure\n\n\n\nR is, in all probablity, already part of your preferred Linux distributions software repositories. If you use a Debian based distribution, it should be as simple as::\n\nuser@linux$ sudo apt install r-base\n\nIf you want to generate literature references (pandoc) and/or generate PDF output (texlive), you probably also want the following software installed:\n\nuser@linux$ sudo apt install pandoc pandoc-citeproc texlive-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-extra texlive-latex-base texlive-latex-extra texlive-latex-recommended texlive-pictures texlive-pstricks texlive-xetex lmodern texlive-lang-european g++ libxml2-dev libcurl4-openssl-dev libssl-dev \n\nIf you are using another distribution (Arch, Red Hat, etc) you simply need to install the same software using their package managers (yum, rpm, etc)\n\n\n\nYou will find a video guide to R installation"
  },
  {
    "objectID": "installation_r_en.html#check-that-r-is-installed-and-working",
    "href": "installation_r_en.html#check-that-r-is-installed-and-working",
    "title": "R installation",
    "section": "2 Check that R is installed and working",
    "text": "2 Check that R is installed and working\nIf the installation process completed as expected, you should now have a working R environment on your computer – before we go any further, it is a good idea to confirm that:\n\nWindowsMacOSLinux\n\n\nTo confirm that R is installed and working, first open a Terminal on your Windows computer:\nOpen the Run window dialogue by holding the Windows key and pressing R, in the window ‘Execute’ in the field ‘Open’ type wt (for Windows Terminal) and click OK.\nIn the Windows Terminal type the following:\n\n...SKAF BILLEDE FRA EN WINDOWS\n\n\n\nTo confirm that R was installed and working on your MacOS, first open a Terminal:\nYou cna find the Terminal in Utilities under Applications or your can hold down the Command key while pressing space to open Spotlight and enter “Terminal” – then double click the appropriate search result.\nIn the MacOS Terminal type:\n\n...SKAF BILLEDE FRA EN MAC\n\n\n\nOpen your favorite command-line interface and try this:\n\nuser@linux: R\n\nThe output should look something like this:\n\nR version 4.1.2 (2021-11-01) -- \"Bird Hippie\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R."
  },
  {
    "objectID": "installation_r_packages_en.html",
    "href": "installation_r_packages_en.html",
    "title": "R package installation",
    "section": "",
    "text": "The standard installation of R consists of a set of ‘core’ functions. In addition to those, it is possible to install a large variety of packages with extra functionality. These packages are developed by the company behind RStudio (Posit), by other companies, universities and by R users … perhaps, some day you will write and publish an R package too?\nSome of these packages have a very specific and narrow forus – e.g. Steen Harsteds packages for handling motion capture data called mocapr. Other packages er more generic and you will get to know some of them during the course. For instance:\n\ntidyverse – en meta-pakckage which makes it easier to work with the R syntax – e.g. by using pipes.\nggplot2 – a package for constructing graphs or plots.\nggpubr – a package which extends ggplot2, aiming to make it easier to produce publication ready plots.\n\nThere are just a few technicalities about R packages, that you need to understand:\n\n\nR packages are specific to the underlying version of R – when a new version of R is published it may take some time for package developers to update their packages. In other words, depending on the packages you make use of, it is not always a good idea to run the absolute latest release of R, but this is mostly an issue if you used ‘niche’ packages.\n\n\n\nIf you want to make use of an R package, you need to install and load it before it is available.\n\nWhen you install a package, it is downloaded from the internet and stored on your harddrive.\nWhen you load the package, it is read into your computeres RAM memory.\n\nNot until the package is in your computers RAM memory will it be available to your code.\n\n\n\nBy far the majority of packages are available online through the Comprehensive R Archive Network – CRAN.\nIf you want to install a CRAN package you can choose to do so via RStudios graphical user interface or via R in an R console. When installing via the R console, you may get some useful information about the installation process, especially if it fails.\n\n\n\n\n\n\nVideo : Installation of R pakker\n\n\n\n\n\n\n\nVideo\nExample installation of an R package"
  },
  {
    "objectID": "installation_r_packages_en.html#what-is-an-r-package",
    "href": "installation_r_packages_en.html#what-is-an-r-package",
    "title": "R package installation",
    "section": "",
    "text": "The standard installation of R consists of a set of ‘core’ functions. In addition to those, it is possible to install a large variety of packages with extra functionality. These packages are developed by the company behind RStudio (Posit), by other companies, universities and by R users … perhaps, some day you will write and publish an R package too?\nSome of these packages have a very specific and narrow forus – e.g. Steen Harsteds packages for handling motion capture data called mocapr. Other packages er more generic and you will get to know some of them during the course. For instance:\n\ntidyverse – en meta-pakckage which makes it easier to work with the R syntax – e.g. by using pipes.\nggplot2 – a package for constructing graphs or plots.\nggpubr – a package which extends ggplot2, aiming to make it easier to produce publication ready plots.\n\nThere are just a few technicalities about R packages, that you need to understand:\n\n\nR packages are specific to the underlying version of R – when a new version of R is published it may take some time for package developers to update their packages. In other words, depending on the packages you make use of, it is not always a good idea to run the absolute latest release of R, but this is mostly an issue if you used ‘niche’ packages.\n\n\n\nIf you want to make use of an R package, you need to install and load it before it is available.\n\nWhen you install a package, it is downloaded from the internet and stored on your harddrive.\nWhen you load the package, it is read into your computeres RAM memory.\n\nNot until the package is in your computers RAM memory will it be available to your code.\n\n\n\nBy far the majority of packages are available online through the Comprehensive R Archive Network – CRAN.\nIf you want to install a CRAN package you can choose to do so via RStudios graphical user interface or via R in an R console. When installing via the R console, you may get some useful information about the installation process, especially if it fails.\n\n\n\n\n\n\nVideo : Installation of R pakker\n\n\n\n\n\n\n\nVideo\nExample installation of an R package"
  },
  {
    "objectID": "installation_r_pakker_da.html",
    "href": "installation_r_pakker_da.html",
    "title": "R package installation",
    "section": "",
    "text": "Standard installationen af R består af et sæt ‘kerne’ funktioner. I tillæg dertil er det muligt at installere en meget lang række af pakker med ekstra funktioner. Disse pakker udvikles både af firmaet bag RStudio (Posit), af andre firmaer, universiteter og af R brugerne … måske en dag vil du også udvikle og offentliggøre en R pakke?\nNogle af disse pakker er udviklet med et meget specifikt og snævert formål for øje – f.eks Steen Harsteds pakke til at håndtere motion capture data kaldet mocapr. Andre pakker er mere alment anvendelige og nogle af dem vil du stifte bekendtskab med i undervisningen. Det gælder f.eks:\n\ntidyverse – en meta-pakke der gør det nemmere at arbejde med R syntaksen – f.eks brugen af pipes.\nggplot2 – en pakke til at konstruere grafer og plots\nggpubr – en pakke som bygger på ggplot2 pakken med det formål at gøre det nemme at producere grafer som er klar til publikation\n\nDer er et par tekniske ting du skal forstå ift R pakker:\n\n\nR pakker kan være specifikke ift den underliggende R version – når der kommer en ny version af R kan det med andre ord tage lidt tid for pakke-udviklerne at opdatere deres pakker. Det er ikke altid en fordel at bruge den absolut nyeste version af R – specielt ikke hvis du også bruger nogle niché pakker.\n\n\n\nHvis du vil bruge en R pakke skal den både installeres og indlæses før du kan bruge den.\n\nNår du installerer pakken, hentes den ned og gemmes lokalt på din computer.\nNår du indlæser pakker, læser du den ind i computerens hukommelse.\n\nFørst når pakken er indlæst i computerens hukommelse vil dens funktioner være tilgængelig for brug i din kode.\n\n\n\nLangt de fleste pakker du kan tænkes at få brug for er tilgængelige på internettet fra the Comprehensive R Archive Network – CRAN.\nSkal du installere en sådan pakke kan du vælge at gøre det via RStudios grafiske brugerflade eller via en R kommando i konsollen. Umiddelbart vil vi anbefale at bruge konsollen da det kan give nogle nyttige informationer hvis installationen fejler.\n\n\n\n\n\n\nVideo : Installation af R pakker\n\n\n\n\n\n\n\nVideo\nEksempel på installation af en R pakke"
  },
  {
    "objectID": "installation_r_pakker_da.html#hvad-er-en-r-pakke",
    "href": "installation_r_pakker_da.html#hvad-er-en-r-pakke",
    "title": "R package installation",
    "section": "",
    "text": "Standard installationen af R består af et sæt ‘kerne’ funktioner. I tillæg dertil er det muligt at installere en meget lang række af pakker med ekstra funktioner. Disse pakker udvikles både af firmaet bag RStudio (Posit), af andre firmaer, universiteter og af R brugerne … måske en dag vil du også udvikle og offentliggøre en R pakke?\nNogle af disse pakker er udviklet med et meget specifikt og snævert formål for øje – f.eks Steen Harsteds pakke til at håndtere motion capture data kaldet mocapr. Andre pakker er mere alment anvendelige og nogle af dem vil du stifte bekendtskab med i undervisningen. Det gælder f.eks:\n\ntidyverse – en meta-pakke der gør det nemmere at arbejde med R syntaksen – f.eks brugen af pipes.\nggplot2 – en pakke til at konstruere grafer og plots\nggpubr – en pakke som bygger på ggplot2 pakken med det formål at gøre det nemme at producere grafer som er klar til publikation\n\nDer er et par tekniske ting du skal forstå ift R pakker:\n\n\nR pakker kan være specifikke ift den underliggende R version – når der kommer en ny version af R kan det med andre ord tage lidt tid for pakke-udviklerne at opdatere deres pakker. Det er ikke altid en fordel at bruge den absolut nyeste version af R – specielt ikke hvis du også bruger nogle niché pakker.\n\n\n\nHvis du vil bruge en R pakke skal den både installeres og indlæses før du kan bruge den.\n\nNår du installerer pakken, hentes den ned og gemmes lokalt på din computer.\nNår du indlæser pakker, læser du den ind i computerens hukommelse.\n\nFørst når pakken er indlæst i computerens hukommelse vil dens funktioner være tilgængelig for brug i din kode.\n\n\n\nLangt de fleste pakker du kan tænkes at få brug for er tilgængelige på internettet fra the Comprehensive R Archive Network – CRAN.\nSkal du installere en sådan pakke kan du vælge at gøre det via RStudios grafiske brugerflade eller via en R kommando i konsollen. Umiddelbart vil vi anbefale at bruge konsollen da det kan give nogle nyttige informationer hvis installationen fejler.\n\n\n\n\n\n\nVideo : Installation af R pakker\n\n\n\n\n\n\n\nVideo\nEksempel på installation af en R pakke"
  },
  {
    "objectID": "reproducible_research_basics_en.html",
    "href": "reproducible_research_basics_en.html",
    "title": "Basics of RRR",
    "section": "",
    "text": "One of the core ideas of R and Quarto MarkDown is to make the code human readable – a concept known as literal programming. R+Quarto code is certainly more readable than classic programming languages, but it is unlikely that you are able to write code that is entirely self-explanatory to a human reader … you will need to add comments for future readers (yourself!) to understand the code.\nR code\nIn R code, you can add a comment using the hashtag #, like this:\n\n# This is a single-line comment in R code\n# ...and there are no multi-line comments: You must add an # for each line\nx &lt;- 2 + 2 # ...but inline comments are okay\n\nQuarto\n\n&lt;!-- This is a single-line comment in markdown --&gt;\n&lt;!--\nThis is a multi-line \ncomment in markdown\n--&gt;\n..and inline &lt;!-- comments are okay too --&gt;\n\n\n\n\n\n\n\nNote! … the hashtag # has different meaning in R code and in quarto code!\n\n\n\n\n\nAs you have just seen, the hashtag # is used to add comments in R code, but in quarto markdown, the hashtag # is used to add level 1 headings, like this:\n\n# This is a level 1 heading\n\n## This is a level 2 heading\n\n\n\n\n\n\n\n\nAre these example R comments okay?Check out the output…Is it good practice\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n# A tibble: 5 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     5     6\n2     6     7\n3     7     8\n4     8     9\n5    10    11\n\n\n\n\nThese comments were syntactically okay … BUT did they make your code easier for humans to read?\n\n\n\n\n\n\n\n# Comment lines before the code\n# can be multiple lines and does\n# not disturb your reading of the\n# code ... best practice!\n\nx &lt;- 2 + 2 # use inline comments sparringly\ny &lt;- x^2 - c(2, 5, 8, 10:14) # ..they are distracting!\n\n\n\n\nWhat comments would be relevant here?\n\n?!\n\n\nSuggest comments for this code… think ‘what’ and ‘why’\n\n# 1\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# 2\nd &lt;- d %&gt;% filter(id != \"241269-1212\")\n\n# 3\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n\n\nSuggestions for meaningful comments\n\n# ?? comments necessary ??\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# excluded as participant entered an invalid CPR number\nd &lt;- d %&gt;% filter(id != \"2321369-1212\")\n\n# set 's' to F(emale) or M(ale) depending on odd/even id number in CPR\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n\n\n\n\n\n\nMain points\n\nAlways comment your code\nComments should explain your thinking : ‘why’\nWith good code the ‘how’ is self-evident\n\n..but if your code can not be self-evident: explain in comments\n\n\n\n\n\n\nMarkdownOutputGood practice\n\n\n#| echo: true\n#| eval: false\nIn markdown, there's an important difference\nbetween '_new-line_' and '_empty-line_'.\n\n...white space matters!\n\n\nIn markdown, there’s an important difference between ‘new-line’ and ‘empty-line’.\n…white space matters!\n\n\n\nany number of spaces between words is equal to one space\nany number of empty lines between paragraphs is equal to one empty line\nuse one space to seperate functions, operators, etc a%&gt;%b vs a %&gt;% b\nuse empty line to indicate new paragraph\n\n\n\n\nHint Check out Soft wrap long lines in the Code menu.\n\n\n\nMaintain a README.md file in each project, at the root level\n\nA simple description of the project purpose (the ‘why’)\nPeople involved\nData sources etc\nList most important components (data and files)\n\n\nEspecially important for larger, more complex projects with many data sources, collaborators, etc\n\n\n\n#| eval: false\n#| echo: true\n# Project title\n\nA subtitle that describes your project, e.g., research question\n\n## Motivation\n\nMotivate your research question or business problem. Clearly explain which problem is solved.\n\n## Method and results\n\nFirst, introduce and motivate your chosen method, and explain how it contributes to solving the research \nquestion/business problem.\n\nSecond, summarize your results concisely. Make use of subheaders where appropriate.\n\n\n## Repository overview\n\nProvide an overview of the directory structure and files, for example:\n\n├── README.md\n├── data\n│   ├── my_data.csv  # raw data from CPR register\n│   ├── exp_data.csv # experimental data register\n├── plots\n│   ├── plot_1.png   # Boxplot of age\n│   ├── plot_2.png   # Pi chart of sex\n│   └── plot_3.png   # Bi-plot age vs measurement X\n├── main.R           # all analyses in one place\n└── manuscript1.Rmd  # for J of RR\n\n## Running instructions\n\nExplain to potential users how to run/replicate your workflow. If necessary, touch upon the required input \ndata, which secret credentials are required (and how to obtain them), which software tools are needed \nto run the workflow (including links to the installation instructions), and how to run the workflow.\n\n## More resources\n\nPoint interested users to any related literature and/or documentation.\n\n## About\n\nExplain who has contributed to the repository."
  },
  {
    "objectID": "reproducible_research_basics_en.html#comments-in-r-code-and-quarto-markdown",
    "href": "reproducible_research_basics_en.html#comments-in-r-code-and-quarto-markdown",
    "title": "Basics of RRR",
    "section": "",
    "text": "One of the core ideas of R and Quarto MarkDown is to make the code human readable – a concept known as literal programming. R+Quarto code is certainly more readable than classic programming languages, but it is unlikely that you are able to write code that is entirely self-explanatory to a human reader … you will need to add comments for future readers (yourself!) to understand the code.\nR code\nIn R code, you can add a comment using the hashtag #, like this:\n\n# This is a single-line comment in R code\n# ...and there are no multi-line comments: You must add an # for each line\nx &lt;- 2 + 2 # ...but inline comments are okay\n\nQuarto\n\n&lt;!-- This is a single-line comment in markdown --&gt;\n&lt;!--\nThis is a multi-line \ncomment in markdown\n--&gt;\n..and inline &lt;!-- comments are okay too --&gt;\n\n\n\n\n\n\n\nNote! … the hashtag # has different meaning in R code and in quarto code!\n\n\n\n\n\nAs you have just seen, the hashtag # is used to add comments in R code, but in quarto markdown, the hashtag # is used to add level 1 headings, like this:\n\n# This is a level 1 heading\n\n## This is a level 2 heading"
  },
  {
    "objectID": "reproducible_research_basics_en.html#where-to-put-comments",
    "href": "reproducible_research_basics_en.html#where-to-put-comments",
    "title": "Basics of RRR",
    "section": "",
    "text": "Are these example R comments okay?Check out the output…Is it good practice\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n# A tibble: 5 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     5     6\n2     6     7\n3     7     8\n4     8     9\n5    10    11\n\n\n\n\nThese comments were syntactically okay … BUT did they make your code easier for humans to read?"
  },
  {
    "objectID": "reproducible_research_basics_en.html#keep-it-simple",
    "href": "reproducible_research_basics_en.html#keep-it-simple",
    "title": "Basics of RRR",
    "section": "",
    "text": "# Comment lines before the code\n# can be multiple lines and does\n# not disturb your reading of the\n# code ... best practice!\n\nx &lt;- 2 + 2 # use inline comments sparringly\ny &lt;- x^2 - c(2, 5, 8, 10:14) # ..they are distracting!"
  },
  {
    "objectID": "reproducible_research_basics_en.html#meaningful-comments",
    "href": "reproducible_research_basics_en.html#meaningful-comments",
    "title": "Basics of RRR",
    "section": "",
    "text": "What comments would be relevant here?\n\n?!\n\n\nSuggest comments for this code… think ‘what’ and ‘why’\n\n# 1\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# 2\nd &lt;- d %&gt;% filter(id != \"241269-1212\")\n\n# 3\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n\n\nSuggestions for meaningful comments\n\n# ?? comments necessary ??\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# excluded as participant entered an invalid CPR number\nd &lt;- d %&gt;% filter(id != \"2321369-1212\")\n\n# set 's' to F(emale) or M(ale) depending on odd/even id number in CPR\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])"
  },
  {
    "objectID": "reproducible_research_basics_en.html#commenting-your-code",
    "href": "reproducible_research_basics_en.html#commenting-your-code",
    "title": "Basics of RRR",
    "section": "",
    "text": "Main points\n\nAlways comment your code\nComments should explain your thinking : ‘why’\nWith good code the ‘how’ is self-evident\n\n..but if your code can not be self-evident: explain in comments"
  },
  {
    "objectID": "reproducible_research_basics_en.html#using-white-space",
    "href": "reproducible_research_basics_en.html#using-white-space",
    "title": "Basics of RRR",
    "section": "",
    "text": "MarkdownOutputGood practice\n\n\n#| echo: true\n#| eval: false\nIn markdown, there's an important difference\nbetween '_new-line_' and '_empty-line_'.\n\n...white space matters!\n\n\nIn markdown, there’s an important difference between ‘new-line’ and ‘empty-line’.\n…white space matters!\n\n\n\nany number of spaces between words is equal to one space\nany number of empty lines between paragraphs is equal to one empty line\nuse one space to seperate functions, operators, etc a%&gt;%b vs a %&gt;% b\nuse empty line to indicate new paragraph\n\n\n\n\nHint Check out Soft wrap long lines in the Code menu."
  },
  {
    "objectID": "reproducible_research_basics_en.html#commenting-your-project",
    "href": "reproducible_research_basics_en.html#commenting-your-project",
    "title": "Basics of RRR",
    "section": "",
    "text": "Maintain a README.md file in each project, at the root level\n\nA simple description of the project purpose (the ‘why’)\nPeople involved\nData sources etc\nList most important components (data and files)\n\n\nEspecially important for larger, more complex projects with many data sources, collaborators, etc"
  },
  {
    "objectID": "reproducible_research_basics_en.html#readme.md-template",
    "href": "reproducible_research_basics_en.html#readme.md-template",
    "title": "Basics of RRR",
    "section": "",
    "text": "#| eval: false\n#| echo: true\n# Project title\n\nA subtitle that describes your project, e.g., research question\n\n## Motivation\n\nMotivate your research question or business problem. Clearly explain which problem is solved.\n\n## Method and results\n\nFirst, introduce and motivate your chosen method, and explain how it contributes to solving the research \nquestion/business problem.\n\nSecond, summarize your results concisely. Make use of subheaders where appropriate.\n\n\n## Repository overview\n\nProvide an overview of the directory structure and files, for example:\n\n├── README.md\n├── data\n│   ├── my_data.csv  # raw data from CPR register\n│   ├── exp_data.csv # experimental data register\n├── plots\n│   ├── plot_1.png   # Boxplot of age\n│   ├── plot_2.png   # Pi chart of sex\n│   └── plot_3.png   # Bi-plot age vs measurement X\n├── main.R           # all analyses in one place\n└── manuscript1.Rmd  # for J of RR\n\n## Running instructions\n\nExplain to potential users how to run/replicate your workflow. If necessary, touch upon the required input \ndata, which secret credentials are required (and how to obtain them), which software tools are needed \nto run the workflow (including links to the installation instructions), and how to run the workflow.\n\n## More resources\n\nPoint interested users to any related literature and/or documentation.\n\n## About\n\nExplain who has contributed to the repository."
  },
  {
    "objectID": "reproducible_research_basics_en.html#meaning",
    "href": "reproducible_research_basics_en.html#meaning",
    "title": "Basics of RRR",
    "section": "2.1 Meaning",
    "text": "2.1 Meaning\nLet variable, function and file names convey meaning.\n\n# 1 \nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n# 2 \nmData &lt;- d %&gt;% filter(s==\"M\")\n\nSuggest alternative code and variable names for this code"
  },
  {
    "objectID": "reproducible_research_basics_en.html#meaning-1",
    "href": "reproducible_research_basics_en.html#meaning-1",
    "title": "Basics of RRR",
    "section": "2.2 Meaning",
    "text": "2.2 Meaning\nLet variable, function and file names convey meaning.\n\n# 1 \ndata &lt;- data %&gt;% \n  mutate(sex=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n# 2 \ndata_males_only &lt;- data %&gt;% filter(sex==\"M\")\nmales_only_data &lt;- data %&gt;% filter(sex==\"M\")"
  },
  {
    "objectID": "reproducible_research_basics_en.html#making-the-meaning-even-clearer",
    "href": "reproducible_research_basics_en.html#making-the-meaning-even-clearer",
    "title": "Basics of RRR",
    "section": "2.3 Making the meaning even clearer…",
    "text": "2.3 Making the meaning even clearer…\n\ndata &lt;- data %&gt;% \n  mutate(sex=cpr2sex(id))\n\nAlas, the function cpr2sex does not exist in base R or Tidyverse\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n# Requires a custom function like this -- which could be sourced from file\n\ncpr2sex &lt;- function(x) {\n  # This function takes a string (x), presumed to be a valid Danish CPR\n  # and return \"F\", \"M\" or NA depending on the last character in the string\n  # If the last CPR character is an even number, it indicates female sex, and\n  # an odd number indicates male sex.\n  if (str_sub(x, str_length(x), str_length(x)) %in% c(\"0\",\"2\",\"4\",\"6\",\"8\")) {\n    return(\"F\") \n  } else if (str_sub(x, str_length(x), str_length(x)) %in% c(\"1\",\"3\",\"5\",\"7\",\"9\")) {\n    return(\"M\") \n  } \n  return(NA) # Last character in CPR is not a ciffre\n}\n\nWe could hide this away in a separate file and ‘source’ it .. or even make a new package…"
  },
  {
    "objectID": "reproducible_research_basics_en.html#compound-names",
    "href": "reproducible_research_basics_en.html#compound-names",
    "title": "Basics of RRR",
    "section": "2.4 Compound names",
    "text": "2.4 Compound names\n\n\nDo use under_scores\nDo not use camelCase\nDo not use kebab-case"
  },
  {
    "objectID": "reproducible_research_basics_en.html#nouns-and-verbs",
    "href": "reproducible_research_basics_en.html#nouns-and-verbs",
    "title": "Basics of RRR",
    "section": "2.5 Nouns and verbs",
    "text": "2.5 Nouns and verbs\n\nmake_larger_by_10 &lt;- function(x) {\n  return(x+10)\n}\n\nten_larger &lt;- make_larger_by_10(112)\n\n# For instance:\n# selected_data &lt;- data %&gt;% select(..)"
  },
  {
    "objectID": "reproducible_research_basics_en.html#names",
    "href": "reproducible_research_basics_en.html#names",
    "title": "Basics of RRR",
    "section": "2.6 Names",
    "text": "2.6 Names\nMain points\n\nNames should be meaningful\nUse under_scores, not CamelCase, nor kebab-case\nFunction names should be verbs\nVariable names should be nouns"
  },
  {
    "objectID": "reproducible_research_basics_en.html#the-root",
    "href": "reproducible_research_basics_en.html#the-root",
    "title": "Basics of RRR",
    "section": "3.1 The root",
    "text": "3.1 The root\n\n3.1.1 One root folder for each project\nShould contain\n\nRStudio project (*.RProj)\nREADME.md\nsessionInfo.txt\nYour main R scripts\nYour RMarkdown and quarto scripts\nRelevant subfolders (/custom_functions, /gfx, /data, etc)"
  },
  {
    "objectID": "reproducible_research_basics_en.html#section-2",
    "href": "reproducible_research_basics_en.html#section-2",
    "title": "Basics of RRR",
    "section": "3.2 ",
    "text": "3.2"
  },
  {
    "objectID": "reproducible_research_basics_en.html#files-and-folders-1",
    "href": "reproducible_research_basics_en.html#files-and-folders-1",
    "title": "Basics of RRR",
    "section": "3.3 Files and folders",
    "text": "3.3 Files and folders\n\n3.3.1 Make and use your own folder/sub-folder template for new projects"
  },
  {
    "objectID": "reproducible_research_basics_en.html#file-types",
    "href": "reproducible_research_basics_en.html#file-types",
    "title": "Basics of RRR",
    "section": "3.4 File types",
    "text": "3.4 File types\n\nText always preferable to binary files\nMarkup files (HTML, XML, etc) are human readable, but can be complex\nApplication files (.odt, .docx) are often either binary files or very complex markup files\n\ngfx/prefer_text_files.pdf\ngfx/prefer_text_files.pdf\ngfx/prefer_text_files.xml"
  },
  {
    "objectID": "reproducible_research_basics_en.html#file-types-1",
    "href": "reproducible_research_basics_en.html#file-types-1",
    "title": "Basics of RRR",
    "section": "3.5 File types",
    "text": "3.5 File types\nStick to simple, human-readable files like R-scripts, markdown, csv files, etc, as far into the process as you can and only generate pdf, word, tiff, jpeg etc files as the final step.\nIf any characters look weird in a simple txt file (it does happen) – it’s probably the character encoding – just stick to UTF8/UTF16\n\n\nBy the way, what do you think the first thing the typesetters at Springer does with your manuscript once accepted?"
  },
  {
    "objectID": "reproducible_research_basics_en.html#files-and-folders-2",
    "href": "reproducible_research_basics_en.html#files-and-folders-2",
    "title": "Basics of RRR",
    "section": "3.6 Files and folders",
    "text": "3.6 Files and folders\nMain points\n\nUse a strict folder structure you can handle – make a template!\nUse relational folder paths if possible\nUse human-readable files only if possible (txt, md, Rmd, csv, etc)\nOnly use non-human readable files for ‘final output’ (pdf, docx, xlsx, etc)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html",
    "href": "reproducible_research_basics_exercises_en.html",
    "title": "RR with R",
    "section": "",
    "text": "“Facilitate easy and accurate reproducibility of all steps of research: Results, process and comprehension – from raw data to finished output”\n\n\n\n\n\n\nTo help yourself not get lost\nDocumentation (formal/legal)\nReproducibility (from A-Z)\nReuseability (different outputs)\nRecycling (reassemble for other purposes)\n\n\n\n\n\n\n\n\n\n\nAim for (**)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#what-it-is",
    "href": "reproducible_research_basics_exercises_en.html#what-it-is",
    "title": "RR with R",
    "section": "",
    "text": "“Facilitate easy and accurate reproducibility of all steps of research: Results, process and comprehension – from raw data to finished output”"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#why",
    "href": "reproducible_research_basics_exercises_en.html#why",
    "title": "RR with R",
    "section": "",
    "text": "To help yourself not get lost\nDocumentation (formal/legal)\nReproducibility (from A-Z)\nReuseability (different outputs)\nRecycling (reassemble for other purposes)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#levels-of-research-reproducibility",
    "href": "reproducible_research_basics_exercises_en.html#levels-of-research-reproducibility",
    "title": "RR with R",
    "section": "",
    "text": "Aim for (**)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#comments-in-r-code-and-markdown",
    "href": "reproducible_research_basics_exercises_en.html#comments-in-r-code-and-markdown",
    "title": "RR with R",
    "section": "2.1 Comments in R code and markdown",
    "text": "2.1 Comments in R code and markdown\nR code\nIn R code, you can add a comment using the hashtag #:\n\n# This is a single-line comment in R code\n# ...there are no multi-line comments\nx &lt;- 2 + 2 # ...but inline comments are okay\n\nQuarto\n\n&lt;!--\nThis is a multi-line comment in markdown\n...there are no single-line comments\n--&gt;\n..and inline &lt;!-- comments are okay too --&gt;\n\n\n\n\n\n\n\nNote! … the hashtag # has different meaning in R code and in quarto code!\n\n\n\n\n\n\nIn R code, the hashtag # is used to add comments as shown above\nIn quarto markdown, the hashtag # is used to add level 1 headings\n\n\n# This is a level 1 heading\n\n## This is a level 2 heading"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#where-to-put-comments",
    "href": "reproducible_research_basics_exercises_en.html#where-to-put-comments",
    "title": "RR with R",
    "section": "2.2 Where to put comments?",
    "text": "2.2 Where to put comments?\n\nAre these example R comments okay?Check out the output…Is it good practice\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n\n\n\n# this is definitely okay\nx &lt;- 2 + 2\n\n# ...but is the following okay?\ntibble(x=1:10, y=2:11) %&gt;% # ..Is this okay?\n  filter(y&gt;5 & # How about breaking in the middle..\n  x != 9) # ..of a statement like 'filter'?\n\n# A tibble: 5 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     5     6\n2     6     7\n3     7     8\n4     8     9\n5    10    11\n\n\n\n\nThese comments were syntactically okay … BUT did they make your code easier for humans to read?"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#keep-it-simple",
    "href": "reproducible_research_basics_exercises_en.html#keep-it-simple",
    "title": "RR with R",
    "section": "2.3 Keep it simple!",
    "text": "2.3 Keep it simple!\n\n# Comment lines before the code\n# can be multiple lines and does\n# not disturb your reading of the\n# code ... best practice!\n\nx &lt;- 2 + 2 # use inline comments sparringly\ny &lt;- x^2 - c(2, 5, 8, 10:14) # ..they are distracting!"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#meaningful-comments",
    "href": "reproducible_research_basics_exercises_en.html#meaningful-comments",
    "title": "RR with R",
    "section": "2.4 Meaningful comments",
    "text": "2.4 Meaningful comments\nWhat comments would be relevant here?\n\n?!\n\n\nSuggest comments for this code… think ‘what’ and ‘why’\n\n# 1\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# 2\nd &lt;- d %&gt;% filter(id != \"241269-1212\")\n\n# 3\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n\n\nSuggestions for meaningful comments\n\n# ?? comments necessary ??\nd &lt;- read.csv(\"my_data_file.csv\")\n\n# excluded as participant entered an invalid CPR number\nd &lt;- d %&gt;% filter(id != \"2321369-1212\")\n\n# set 's' to F(emale) or M(ale) depending on odd/even id number in CPR\nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#commenting-your-code",
    "href": "reproducible_research_basics_exercises_en.html#commenting-your-code",
    "title": "RR with R",
    "section": "2.5 Commenting your code",
    "text": "2.5 Commenting your code\nMain points\n\nAlways comment your code\nComments should explain your thinking : ‘why’\nWith good code the ‘how’ is self-evident\n\n..but if your code can not be self-evident: explain in comments"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#using-white-space",
    "href": "reproducible_research_basics_exercises_en.html#using-white-space",
    "title": "RR with R",
    "section": "2.6 Using white space",
    "text": "2.6 Using white space\n\nMarkdownOutputGood practice\n\n\n#| echo: true\n#| eval: false\nIn markdown, there's an important difference\nbetween '_new-line_' and '_empty-line_'.\n\n...white space matters!\n\n\nIn markdown, there’s an important difference between ‘new-line’ and ‘empty-line’.\n…white space matters!\n\n\n\nany number of spaces between words is equal to one space\nany number of empty lines between paragraphs is equal to one empty line\nuse one space to seperate functions, operators, etc a%&gt;%b vs a %&gt;% b\nuse empty line to indicate new paragraph\n\n\n\n\nHint Check out Soft wrap long lines in the Code menu."
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#commenting-your-project",
    "href": "reproducible_research_basics_exercises_en.html#commenting-your-project",
    "title": "RR with R",
    "section": "2.7 Commenting your project",
    "text": "2.7 Commenting your project\nMaintain a README.md file in each project, at the root level\n\nA simple description of the project purpose (the ‘why’)\nPeople involved\nData sources etc\nList most important components (data and files)\n\n\nEspecially important for larger, more complex projects with many data sources, collaborators, etc"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#readme.md-template",
    "href": "reproducible_research_basics_exercises_en.html#readme.md-template",
    "title": "RR with R",
    "section": "2.8 README.md template",
    "text": "2.8 README.md template\n#| eval: false\n#| echo: true\n# Project title\n\nA subtitle that describes your project, e.g., research question\n\n## Motivation\n\nMotivate your research question or business problem. Clearly explain which problem is solved.\n\n## Method and results\n\nFirst, introduce and motivate your chosen method, and explain how it contributes to solving the research \nquestion/business problem.\n\nSecond, summarize your results concisely. Make use of subheaders where appropriate.\n\n\n## Repository overview\n\nProvide an overview of the directory structure and files, for example:\n\n├── README.md\n├── data\n│   ├── my_data.csv  # raw data from CPR register\n│   ├── exp_data.csv # experimental data register\n├── plots\n│   ├── plot_1.png   # Boxplot of age\n│   ├── plot_2.png   # Pi chart of sex\n│   └── plot_3.png   # Bi-plot age vs measurement X\n├── main.R           # all analyses in one place\n└── manuscript1.Rmd  # for J of RR\n\n## Running instructions\n\nExplain to potential users how to run/replicate your workflow. If necessary, touch upon the required input \ndata, which secret credentials are required (and how to obtain them), which software tools are needed \nto run the workflow (including links to the installation instructions), and how to run the workflow.\n\n## More resources\n\nPoint interested users to any related literature and/or documentation.\n\n## About\n\nExplain who has contributed to the repository."
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#meaning",
    "href": "reproducible_research_basics_exercises_en.html#meaning",
    "title": "RR with R",
    "section": "3.1 Meaning",
    "text": "3.1 Meaning\nLet variable, function and file names convey meaning.\n\n# 1 \nd &lt;- d %&gt;% \n  mutate(s=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n# 2 \nmData &lt;- d %&gt;% filter(s==\"M\")\n\nSuggest alternative code and variable names for this code"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#meaning-1",
    "href": "reproducible_research_basics_exercises_en.html#meaning-1",
    "title": "RR with R",
    "section": "3.2 Meaning",
    "text": "3.2 Meaning\nLet variable, function and file names convey meaning.\n\n# 1 \ndata &lt;- data %&gt;% \n  mutate(sex=factor(c(\"M\", \"F\"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])\n\n# 2 \ndata_males_only &lt;- data %&gt;% filter(sex==\"M\")\nmales_only_data &lt;- data %&gt;% filter(sex==\"M\")"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#making-the-meaning-even-clearer",
    "href": "reproducible_research_basics_exercises_en.html#making-the-meaning-even-clearer",
    "title": "RR with R",
    "section": "3.3 Making the meaning even clearer…",
    "text": "3.3 Making the meaning even clearer…\n\ndata &lt;- data %&gt;% \n  mutate(sex=cpr2sex(id))\n\nAlas, the function cpr2sex does not exist in base R or Tidyverse\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n# Requires a custom function like this -- which could be sourced from file\n\ncpr2sex &lt;- function(x) {\n  # This function takes a string (x), presumed to be a valid Danish CPR\n  # and return \"F\", \"M\" or NA depending on the last character in the string\n  # If the last CPR character is an even number, it indicates female sex, and\n  # an odd number indicates male sex.\n  if (str_sub(x, str_length(x), str_length(x)) %in% c(\"0\",\"2\",\"4\",\"6\",\"8\")) {\n    return(\"F\") \n  } else if (str_sub(x, str_length(x), str_length(x)) %in% c(\"1\",\"3\",\"5\",\"7\",\"9\")) {\n    return(\"M\") \n  } \n  return(NA) # Last character in CPR is not a ciffre\n}\n\nWe could hide this away in a separate file and ‘source’ it .. or even make a new package…"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#compound-names",
    "href": "reproducible_research_basics_exercises_en.html#compound-names",
    "title": "RR with R",
    "section": "3.4 Compound names",
    "text": "3.4 Compound names\n\n\nDo use under_scores\nDo not use camelCase\nDo not use kebab-case"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#nouns-and-verbs",
    "href": "reproducible_research_basics_exercises_en.html#nouns-and-verbs",
    "title": "RR with R",
    "section": "3.5 Nouns and verbs",
    "text": "3.5 Nouns and verbs\n\nmake_larger_by_10 &lt;- function(x) {\n  return(x+10)\n}\n\nten_larger &lt;- make_larger_by_10(112)\n\n# For instance:\n# selected_data &lt;- data %&gt;% select(..)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#names",
    "href": "reproducible_research_basics_exercises_en.html#names",
    "title": "RR with R",
    "section": "3.6 Names",
    "text": "3.6 Names\nMain points\n\nNames should be meaningful\nUse under_scores, not CamelCase, nor kebab-case\nFunction names should be verbs\nVariable names should be nouns"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#the-root",
    "href": "reproducible_research_basics_exercises_en.html#the-root",
    "title": "RR with R",
    "section": "4.1 The root",
    "text": "4.1 The root\n\n4.1.1 One root folder for each project\nShould contain\n\nRStudio project (*.RProj)\nREADME.md\nsessionInfo.txt\nYour main R scripts\nYour RMarkdown and quarto scripts\nRelevant subfolders (/custom_functions, /gfx, /data, etc)"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#section-2",
    "href": "reproducible_research_basics_exercises_en.html#section-2",
    "title": "RR with R",
    "section": "4.2 ",
    "text": "4.2"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#files-and-folders-1",
    "href": "reproducible_research_basics_exercises_en.html#files-and-folders-1",
    "title": "RR with R",
    "section": "4.3 Files and folders",
    "text": "4.3 Files and folders\n\n4.3.1 Make and use your own folder/sub-folder template for new projects"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#file-types",
    "href": "reproducible_research_basics_exercises_en.html#file-types",
    "title": "RR with R",
    "section": "4.4 File types",
    "text": "4.4 File types\n\nText always preferable to binary files\nMarkup files (HTML, XML, etc) are human readable, but can be complex\nApplication files (.odt, .docx) are often either binary files or very complex markup files\n\ngfx/prefer_text_files.pdf\ngfx/prefer_text_files.pdf\ngfx/prefer_text_files.xml"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#file-types-1",
    "href": "reproducible_research_basics_exercises_en.html#file-types-1",
    "title": "RR with R",
    "section": "4.5 File types",
    "text": "4.5 File types\nStick to simple, human-readable files like R-scripts, markdown, csv files, etc, as far into the process as you can and only generate pdf, word, tiff, jpeg etc files as the final step.\nIf any characters look weird in a simple txt file (it does happen) – it’s probably the character encoding – just stick to UTF8/UTF16\n\n\nBy the way, what do you think the first thing the typesetters at Springer does with your manuscript once accepted?"
  },
  {
    "objectID": "reproducible_research_basics_exercises_en.html#files-and-folders-2",
    "href": "reproducible_research_basics_exercises_en.html#files-and-folders-2",
    "title": "RR with R",
    "section": "4.6 Files and folders",
    "text": "4.6 Files and folders\nMain points\n\nUse a strict folder structure you can handle – make a template!\nUse relational folder paths if possible\nUse human-readable files only if possible (txt, md, Rmd, csv, etc)\nOnly use non-human readable files for ‘final output’ (pdf, docx, xlsx, etc)"
  },
  {
    "objectID": "reproducible_research_intro_en.html",
    "href": "reproducible_research_intro_en.html",
    "title": "Intro to RRR",
    "section": "",
    "text": "“Facilitate easy and accurate reproducibility of all steps of research: Results, process and comprehension – from raw data to finished output”\n\n\n\n\n\n\nTo help yourself not get lost (or find your way again)\nDocumentation (formal/legal)\nReproducibility (from A-Z)\nReuseability (different outputs)\nRecycling (reassemble for other purposes)\n\n\n\n\n\n\n\n\n\n\nAim for level four ‘Product documentation’ (**) – Level 5 ‘Process documentation’ can be quite involved is probably only relevant when many authors collaborate on the same code/data: If it is important to know who did what when (who screwed up?)."
  },
  {
    "objectID": "reproducible_research_intro_en.html#what-it-is",
    "href": "reproducible_research_intro_en.html#what-it-is",
    "title": "Intro to RRR",
    "section": "",
    "text": "“Facilitate easy and accurate reproducibility of all steps of research: Results, process and comprehension – from raw data to finished output”"
  },
  {
    "objectID": "reproducible_research_intro_en.html#why",
    "href": "reproducible_research_intro_en.html#why",
    "title": "Intro to RRR",
    "section": "",
    "text": "To help yourself not get lost (or find your way again)\nDocumentation (formal/legal)\nReproducibility (from A-Z)\nReuseability (different outputs)\nRecycling (reassemble for other purposes)"
  },
  {
    "objectID": "reproducible_research_intro_en.html#levels-of-research-reproducibility",
    "href": "reproducible_research_intro_en.html#levels-of-research-reproducibility",
    "title": "Intro to RRR",
    "section": "",
    "text": "Aim for level four ‘Product documentation’ (**) – Level 5 ‘Process documentation’ can be quite involved is probably only relevant when many authors collaborate on the same code/data: If it is important to know who did what when (who screwed up?)."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_da.html",
    "href": "rstudio_introduction_to_gui_1_da.html",
    "title": "RStudios GUI #1",
    "section": "",
    "text": "Et første overblik over RStudios GUI\n\n\nI udgangspunktet er RStudio inddelt i 4 paneler (de forskellige farver herover er tilføjet for illustrere). Dette layout kan tilpasses som du måtte ønske det, men indtil videre, så lad den være som i udgangspunktet og i illustrationen herover.\n\n\n\n\n\n\nHvis dit layout ikke ser ligedan ud … klik her.\n\n\n\n\n\nHvis text editor feltet mangler, er det sandsynligvis bare fordi du ikke har noget dokument åben til at redigere i – prøv at klikke File / New file / R script (CTRL+SHIFT+n).\nHvis du ved et uheld har fået skjult et eller flere paneler, så prøv at klikke View / Panes / Show all panes (CTRL+SHIFT+o)."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_da.html#et-første-overblik-over-rstudios-gui",
    "href": "rstudio_introduction_to_gui_1_da.html#et-første-overblik-over-rstudios-gui",
    "title": "RStudios GUI #1",
    "section": "",
    "text": "Et første overblik over RStudios GUI\n\n\nI udgangspunktet er RStudio inddelt i 4 paneler (de forskellige farver herover er tilføjet for illustrere). Dette layout kan tilpasses som du måtte ønske det, men indtil videre, så lad den være som i udgangspunktet og i illustrationen herover.\n\n\n\n\n\n\nHvis dit layout ikke ser ligedan ud … klik her.\n\n\n\n\n\nHvis text editor feltet mangler, er det sandsynligvis bare fordi du ikke har noget dokument åben til at redigere i – prøv at klikke File / New file / R script (CTRL+SHIFT+n).\nHvis du ved et uheld har fået skjult et eller flere paneler, så prøv at klikke View / Panes / Show all panes (CTRL+SHIFT+o)."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_da.html#ændre-størrelse-på-panelerne",
    "href": "rstudio_introduction_to_gui_1_da.html#ændre-størrelse-på-panelerne",
    "title": "RStudios GUI #1",
    "section": "2 Ændre størrelse på panelerne",
    "text": "2 Ændre størrelse på panelerne\nKlik og træk..\n\n\n\nÆndring af panel størrelserne med klik-og-træk\n\n\nBemærk også minimize og maximize ikonerne øverst til højre i hvert panel: \n\n\n\nMinimizing and maximizing panes in RStudio"
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_da.html#rstudio-layout",
    "href": "rstudio_introduction_to_gui_1_da.html#rstudio-layout",
    "title": "RStudios GUI #1",
    "section": "3 RStudio layout",
    "text": "3 RStudio layout\nØnsker du at ændre layout (forskellige farver, skrifttyper, tekst størrelse, osv) i RSudio? Klik: Tools / Global options / Appearance … men indtil videre, lad de andre indstillinger være i fred, f.eks General, Code, etc.\n\n\n\nChanging the RStudio appearance"
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_da.html#flere-faneblade-i-hvert-panel",
    "href": "rstudio_introduction_to_gui_1_da.html#flere-faneblade-i-hvert-panel",
    "title": "RStudios GUI #1",
    "section": "4 Flere faneblade i hvert panel",
    "text": "4 Flere faneblade i hvert panel\nHvert panel i RStudio har som regel adskillige fanebalde. For eksempel, i billedet herunder, indeholder ‘Output’ panel fanebladene Files, Plots, Packages, Help, Viewer og Presentation.\n\n\n\nMultiple tabs in each RStudio pane\n\n\nBemærk, at de faneblade som ses vil variere afhængigt hvad type dokument du arbejder med. Visse ekstra funktioner, som eksempelvis Git versionerings kontrol, vil også ændre på hvilke faneblade der præsenteres.\n\n\n\n\n\n\nØvelse #1\n\n\n\n\n\nPrøv at gennemføre følgende:\n\nLav tre faneblade i ‘Text editor’ panelet.\nBrug hjælpefunktionen til at afgøre hvordan du kan bruge R til at finde ud af hvilken version af R du har installeret på din computer.\nFind din R konsol. Tast: a &lt;- 5 (tryk enter) – hvad skete der i dit Environment?\nSkift dit RSudio layout til et dark farve skema.\n\n\n\n\n\n\n\n\n\n\nSvar på øvelse #1\n\n\n\n\n\n\nLav blot tre nye tomme dokumenter at redigere: File / New file / R script (CTRL+SHIFT+n).\nBemærk, at der er to søgefelter på ‘help’ fanebladet i ‘Output’ panelet – brug den til højre til at lære mere om (base)funktionen R.Version.\nI Environment fanebladet i Environment panelet, skulle du se en liste af ‘Values’ hvor ‘a’ er ‘5’.\nI Tools / Global options / Appearance, vælg f.eks ‘Cobalt’ i Editor theme dialogen."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_en.html",
    "href": "rstudio_introduction_to_gui_1_en.html",
    "title": "RStudios GUI #1",
    "section": "",
    "text": "A first time overview of RStudios GUI\n\n\nBy default, the RStudio GUI is divided into four panes (the different colors added here are for illustration). This layout can be changed to your liking, but for now stick with the standard as illustrated above.\n\n\n\n\n\n\nIf your layout does not look like that … click here.\n\n\n\n\n\nIf the text editor field is missing, it is probably just because you do not have any text files open for editing – try clicking File / New file / R script (CTRL+SHIFT+n).\nIf you have accidentally hidden one or more panes, try clicking View / Panes / Show all panes (CTRL+SHIFT+o)."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_en.html#a-first-time-overview-of-rstudios-gui",
    "href": "rstudio_introduction_to_gui_1_en.html#a-first-time-overview-of-rstudios-gui",
    "title": "RStudios GUI #1",
    "section": "",
    "text": "A first time overview of RStudios GUI\n\n\nBy default, the RStudio GUI is divided into four panes (the different colors added here are for illustration). This layout can be changed to your liking, but for now stick with the standard as illustrated above.\n\n\n\n\n\n\nIf your layout does not look like that … click here.\n\n\n\n\n\nIf the text editor field is missing, it is probably just because you do not have any text files open for editing – try clicking File / New file / R script (CTRL+SHIFT+n).\nIf you have accidentally hidden one or more panes, try clicking View / Panes / Show all panes (CTRL+SHIFT+o)."
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_en.html#resizing-panes",
    "href": "rstudio_introduction_to_gui_1_en.html#resizing-panes",
    "title": "RStudios GUI #1",
    "section": "2 Resizing panes",
    "text": "2 Resizing panes\nClick and drag…\n\n\n\nResizing panes in RStudio with click-and-drag\n\n\nAlso, note the minimize and maximize icons in the top-right hand corner of each pane: \n\n\n\nMinimizing and maximizing panes in RStudio"
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_en.html#rstudio-layout",
    "href": "rstudio_introduction_to_gui_1_en.html#rstudio-layout",
    "title": "RStudios GUI #1",
    "section": "3 RStudio layout",
    "text": "3 RStudio layout\nWant to change the layout (different colors, fonts, text size, etc) of RStudio? Click: Tools / Global options / Appearance … for now, do not mess with the settings in General, Code, etc.\n\n\n\nChanging the RStudio appearance"
  },
  {
    "objectID": "rstudio_introduction_to_gui_1_en.html#multiple-tabs-in-panes",
    "href": "rstudio_introduction_to_gui_1_en.html#multiple-tabs-in-panes",
    "title": "RStudios GUI #1",
    "section": "4 Multiple tabs in panes",
    "text": "4 Multiple tabs in panes\nEach pane in RStudio can, and often will, contain more than a single tab. For instance, in the image below, the ‘Output’ pane contains Files, Plots, Packages, Help, Viewer and Presentation.\n\n\n\nMultiple tabs in each RStudio pane\n\n\nNote, that the tabs presented in a pane may depend on the type of document you are working with. Also some extra functionality, such as Git version control, will change the available tabs.\n\n\n\n\n\n\nExercise #1\n\n\n\n\n\nTry to complete the following:\n\nCreate three panes in the ‘Text editor’ pane.\nUse the help functionality to find out how to determine the version of R on your computer.\nFind your R console. type: a &lt;- 5 (press enter) – what happened in your Environment?\nChange the layout of RStudio to a dark color scheme.\n\n\n\n\n\n\n\n\n\n\nSolution to exercise #1\n\n\n\n\n\n\nSimply create three new files: File / New file / R script (CTRL+SHIFT+n).\nNote there are two search boxes in the help tab of the output pane – use the one on the right hand side to learn about the R.Version base function.\nIn the Environment tab of the Environment pane, you should see a list of ‘Values’ with ‘a’ being ‘5’.\nIn Tools / Global options / Appearance, choose e.g. ‘Cobalt’ in the Editor theme dialog."
  }
]