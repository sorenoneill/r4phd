[
  {
    "objectID": "day_1_other.html",
    "href": "day_1_other.html",
    "title": "dplyr",
    "section": "",
    "text": "In this section we will explore a few other functions that you most likely are going to need.\n\n_join()\npivot_wider() and pivot_longer()\n\n\n\n\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n ## Wide and Long data formats In the realm of data science, it’s common to encounter data in what we call a “wide” format. To visualize this, imagine that each measurement of the same attribute is spread across multiple columns instead of being listed down in rows. Consider a scenario where we record a person’s weight at different intervals; in the wide format, we might see individual columns dedicated to each time point, like weightkg_week0, weightkg_week10 and so forth. Essentially, the column labels often carry dual information: the attribute (in this case, ‘weight’) and the condition or time (like ‘week0’ or ‘week10’).\nOften, data is inputted in this wide format for convenience, as it visually follows the chronological order of data collection or event occurrence. However, in the practice of data science, it’s generally more efficient to work with data in what we call a “long” format.\nIn long format, the data is structured such that each row is a unique observation or instance, and each column represents a unique variable or attribute. Continuing with the weight example, instead of having separate columns for each week’s weight (weightkg_week0, weightkg_week10), we would have separate rows for each weight measurement, with a column for the weight (weightkg) and another column for the time point (week).\nThe long format, also known as “tidy” data, provides a systematic and consistent structure, allowing us to work with data more effectively. Plus, many functions and packages in R, such as the popular ggplot2 for data visualization, are designed to work optimally with this long format.\nBut how do we move from wide format to long format? And vice versa? This is where the pivot_longer() and pivot_wider() functions from the tidyverse in R come into play.\n\n\n\nThe code creates a made-up data set. You dont need to understand the code.\n\nIs the data frame in a wide or long format? How can you tell?\n\n\nset.seed(1)\n\nweight_data &lt;- tibble(\n  id = 1:100,\n  sex = sample(c(\"Male\", \"Female\"), size = 100, replace = TRUE),\n  weight_week0 = rnorm(100, mean = 95, sd = 5)) %&gt;% \n  \n  # Mean wiegh more than women\n  mutate(\n    weight_week0 = if_else(\n      sex == \"Male\", weight_week0 * rnorm(100, mean = 1.15, sd = 0.3),\n      weight_week0\n    )\n  ) %&gt;% \n  \n  # Weight change over weeks\n  mutate(\n    weight_week1 = rnorm(100, mean = weight_week0*0.96, sd = 0.5), \n    weight_week2 = rnorm(100, mean = weight_week1*0.97, sd = 0.5),\n    weight_week3 = rnorm(100, mean = weight_week2*0.98, sd = 0.5), \n    weight_week4 = rnorm(100, mean = weight_week3*0.99, sd = 0.5),\n    weight_week5 = rnorm(100, mean = weight_week4, sd = 0.5))\n  \n\nweight_data\n\n\n\n\nThis exercise is only here to show you how troublesome it can be to work with data in a wide format\n\n\nShow the code\nweight_data %&gt;% \n  group_by(sex) %&gt;% \n  summarise(week0_mean = mean(weight_week0),\n            week0_sd   = sd(weight_week0),\n            week1_mean = mean(weight_week1),\n            week1_sd   = sd(weight_week1),\n            # etc. etc.\n            )\n\n\n\n\n\n\nThe pivot_longer() function takes wide format data and makes it longer by increasing the number of rows and decreasing the number of columns. For example, it can take our weight data from multiple columns (weightkg_week0, weightkg_week10) and collapse them into two columns: one for weight and one for timepoint.\nOn the other hand, the pivot_wider() function takes long format data and makes it wider by decreasing the number of rows and increasing the number of columns. For instance, it can spread our long format weight data back into multiple columns for each week’s weight.\n\n\n\nwhat does this line in the help file mean? cols tidy-select&gt; Columns to pivot into longer format.\n\n\n\nShow the code\n?pivot_longer\n\n\n\n\n\nChange it into three variables:\n\nsex (“female”, “male”)\npregnant (“yes”, “no”)\ncount, which is a non-negative integer representing the number of observations.\n\n\npreg &lt;- tribble(\n  ~pregnant, ~male, ~female,\n  \"yes\", NA, 10,\n  \"no\", 20, 12\n)\npreg\n\n\n\nShow the code\npreg %&gt;%\n  pivot_longer(c(male, female), names_to = \"sex\", values_to = \"count\")\n\n\n\n\n\n\n\ntable2 displays the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. The data contains values associated with four variables (country, year, cases, and population).\nChange table2 into the output below:\n\n\nShow the code\ntable2 %&gt;% \n  pivot_wider(names_from = type,\n              values_from = count)\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\npeople2 &lt;- tribble(\n  ~name, ~key, ~value,\n  #-----------------|--------|------\n  \"Phillip Woods\",  \"age\", 45,\n  \"Phillip Woods\", \"height\", 186,\n  \"Phillip Woods\", \"age\", 50,\n  \"Jessica Cordero\", \"age\", 37,\n  \"Jessica Cordero\", \"height\", 156\n)\n\n\n\nShow the code\npeople2 %&gt;% \n  pivot_wider()\n\n\n# A tibble: 2 × 3\n  key    `Phillip Woods` `Jessica Cordero`\n  &lt;chr&gt;  &lt;list&gt;          &lt;list&gt;           \n1 age    &lt;dbl [2]&gt;       &lt;dbl [1]&gt;        \n2 height &lt;dbl [1]&gt;       &lt;dbl [1]&gt;        \n\n\n\n\nANSWER\n\nWidening this data frame using pivot_wider() produces columns that are lists of numeric vectors because the name and key columns do not uniquely identify rows. In particular, there are two rows with values for the age of “Phillip Woods”.\n\n\n\n\n\nWhy are pivot_longer() and pivot_wider() not perfectly symmetrical?\nIn other words, why are the two outputs below not identical?\n\n\nHINT\n\nHint: Notice the column types\n\n\nstocks &lt;- tibble(\n  year   = c(2015, 2015, 2016, 2016),\n  half  = c(   1,    2,     1,    2),\n  return = c(1.88, 0.59, 0.92, 0.17)\n)\nstocks\n\n# A tibble: 4 × 3\n   year  half return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2016     1   0.92\n4  2016     2   0.17\n\nstocks %&gt;% \n  pivot_wider(names_from = year, values_from = return) %&gt;% \n  pivot_longer(`2015`:`2016`, names_to = \"year\", values_to = \"return\")\n\n# A tibble: 4 × 3\n   half year  return\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 2015    1.88\n2     1 2016    0.92\n3     2 2015    0.59\n4     2 2016    0.17\n\n\n\n\nANSWER\n\nThe functions pivot_longer() and pivot_wider() are not perfectly symmetrical because column type information is lost when a data frame is converted from wide to long.\npivot_longer() stacks multiple columns which may have had multiple data types into a single column with a single data type. This transformation throws away the individual data types of the original columns. pivot_wider() creates new column names from values in a column. These new column names will always be treated as character values by pivot_longer() so if the original variable used to create the column names did not have a character data type, then the round-trip will not reproduce the same dataset.\n\n\n\n\n\n\nRun this code to get example data\n\nset.seed(1)\nA &lt;- tibble(id = c(1:5, 7:8),\n            sex = sample(c(\"Male\", \"Female\"), 7, replace = TRUE),\n            nr_of_orders = sample(5:10, 7, replace = TRUE))\nB &lt;- tibble(id = 1:6,\n            age = sample(25:75, 6),\n            total_order_value = sample(5:50, 6)*100)\n\n\n\n\n\n\nShow the code\nanti_join(A, B)\nanti_join(B, A)\n\n\n\n\n\n\n\nsemi_join(A, B)\n\n\n\n\n\n\n\nShow the code\nleft_join(A, B)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  arrange(id)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) \n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) %&gt;% \n  group_by(sex) %&gt;% \n  summarise(\n    mean_avg_order_value = mean(avg_order_value, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "day_1_other.html#getting-started-for-now",
    "href": "day_1_other.html#getting-started-for-now",
    "title": "dplyr",
    "section": "",
    "text": "Show the code\nlibrary(tidyverse)\nlibrary(here)\n\n\n ## Wide and Long data formats In the realm of data science, it’s common to encounter data in what we call a “wide” format. To visualize this, imagine that each measurement of the same attribute is spread across multiple columns instead of being listed down in rows. Consider a scenario where we record a person’s weight at different intervals; in the wide format, we might see individual columns dedicated to each time point, like weightkg_week0, weightkg_week10 and so forth. Essentially, the column labels often carry dual information: the attribute (in this case, ‘weight’) and the condition or time (like ‘week0’ or ‘week10’).\nOften, data is inputted in this wide format for convenience, as it visually follows the chronological order of data collection or event occurrence. However, in the practice of data science, it’s generally more efficient to work with data in what we call a “long” format.\nIn long format, the data is structured such that each row is a unique observation or instance, and each column represents a unique variable or attribute. Continuing with the weight example, instead of having separate columns for each week’s weight (weightkg_week0, weightkg_week10), we would have separate rows for each weight measurement, with a column for the weight (weightkg) and another column for the time point (week).\nThe long format, also known as “tidy” data, provides a systematic and consistent structure, allowing us to work with data more effectively. Plus, many functions and packages in R, such as the popular ggplot2 for data visualization, are designed to work optimally with this long format.\nBut how do we move from wide format to long format? And vice versa? This is where the pivot_longer() and pivot_wider() functions from the tidyverse in R come into play.\n\n\n\nThe code creates a made-up data set. You dont need to understand the code.\n\nIs the data frame in a wide or long format? How can you tell?\n\n\nset.seed(1)\n\nweight_data &lt;- tibble(\n  id = 1:100,\n  sex = sample(c(\"Male\", \"Female\"), size = 100, replace = TRUE),\n  weight_week0 = rnorm(100, mean = 95, sd = 5)) %&gt;% \n  \n  # Mean wiegh more than women\n  mutate(\n    weight_week0 = if_else(\n      sex == \"Male\", weight_week0 * rnorm(100, mean = 1.15, sd = 0.3),\n      weight_week0\n    )\n  ) %&gt;% \n  \n  # Weight change over weeks\n  mutate(\n    weight_week1 = rnorm(100, mean = weight_week0*0.96, sd = 0.5), \n    weight_week2 = rnorm(100, mean = weight_week1*0.97, sd = 0.5),\n    weight_week3 = rnorm(100, mean = weight_week2*0.98, sd = 0.5), \n    weight_week4 = rnorm(100, mean = weight_week3*0.99, sd = 0.5),\n    weight_week5 = rnorm(100, mean = weight_week4, sd = 0.5))\n  \n\nweight_data\n\n\n\n\nThis exercise is only here to show you how troublesome it can be to work with data in a wide format\n\n\nShow the code\nweight_data %&gt;% \n  group_by(sex) %&gt;% \n  summarise(week0_mean = mean(weight_week0),\n            week0_sd   = sd(weight_week0),\n            week1_mean = mean(weight_week1),\n            week1_sd   = sd(weight_week1),\n            # etc. etc.\n            )"
  },
  {
    "objectID": "day_1_other.html#pivot_",
    "href": "day_1_other.html#pivot_",
    "title": "dplyr",
    "section": "",
    "text": "The pivot_longer() function takes wide format data and makes it longer by increasing the number of rows and decreasing the number of columns. For example, it can take our weight data from multiple columns (weightkg_week0, weightkg_week10) and collapse them into two columns: one for weight and one for timepoint.\nOn the other hand, the pivot_wider() function takes long format data and makes it wider by decreasing the number of rows and increasing the number of columns. For instance, it can spread our long format weight data back into multiple columns for each week’s weight.\n\n\n\nwhat does this line in the help file mean? cols tidy-select&gt; Columns to pivot into longer format.\n\n\n\nShow the code\n?pivot_longer\n\n\n\n\n\nChange it into three variables:\n\nsex (“female”, “male”)\npregnant (“yes”, “no”)\ncount, which is a non-negative integer representing the number of observations.\n\n\npreg &lt;- tribble(\n  ~pregnant, ~male, ~female,\n  \"yes\", NA, 10,\n  \"no\", 20, 12\n)\npreg\n\n\n\nShow the code\npreg %&gt;%\n  pivot_longer(c(male, female), names_to = \"sex\", values_to = \"count\")\n\n\n\n\n\n\n\ntable2 displays the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. The data contains values associated with four variables (country, year, cases, and population).\nChange table2 into the output below:\n\n\nShow the code\ntable2 %&gt;% \n  pivot_wider(names_from = type,\n              values_from = count)\n\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\npeople2 &lt;- tribble(\n  ~name, ~key, ~value,\n  #-----------------|--------|------\n  \"Phillip Woods\",  \"age\", 45,\n  \"Phillip Woods\", \"height\", 186,\n  \"Phillip Woods\", \"age\", 50,\n  \"Jessica Cordero\", \"age\", 37,\n  \"Jessica Cordero\", \"height\", 156\n)\n\n\n\nShow the code\npeople2 %&gt;% \n  pivot_wider()\n\n\n# A tibble: 2 × 3\n  key    `Phillip Woods` `Jessica Cordero`\n  &lt;chr&gt;  &lt;list&gt;          &lt;list&gt;           \n1 age    &lt;dbl [2]&gt;       &lt;dbl [1]&gt;        \n2 height &lt;dbl [1]&gt;       &lt;dbl [1]&gt;        \n\n\n\n\nANSWER\n\nWidening this data frame using pivot_wider() produces columns that are lists of numeric vectors because the name and key columns do not uniquely identify rows. In particular, there are two rows with values for the age of “Phillip Woods”.\n\n\n\n\n\nWhy are pivot_longer() and pivot_wider() not perfectly symmetrical?\nIn other words, why are the two outputs below not identical?\n\n\nHINT\n\nHint: Notice the column types\n\n\nstocks &lt;- tibble(\n  year   = c(2015, 2015, 2016, 2016),\n  half  = c(   1,    2,     1,    2),\n  return = c(1.88, 0.59, 0.92, 0.17)\n)\nstocks\n\n# A tibble: 4 × 3\n   year  half return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2016     1   0.92\n4  2016     2   0.17\n\nstocks %&gt;% \n  pivot_wider(names_from = year, values_from = return) %&gt;% \n  pivot_longer(`2015`:`2016`, names_to = \"year\", values_to = \"return\")\n\n# A tibble: 4 × 3\n   half year  return\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 2015    1.88\n2     1 2016    0.92\n3     2 2015    0.59\n4     2 2016    0.17\n\n\n\n\nANSWER\n\nThe functions pivot_longer() and pivot_wider() are not perfectly symmetrical because column type information is lost when a data frame is converted from wide to long.\npivot_longer() stacks multiple columns which may have had multiple data types into a single column with a single data type. This transformation throws away the individual data types of the original columns. pivot_wider() creates new column names from values in a column. These new column names will always be treated as character values by pivot_longer() so if the original variable used to create the column names did not have a character data type, then the round-trip will not reproduce the same dataset."
  },
  {
    "objectID": "day_1_other.html#join",
    "href": "day_1_other.html#join",
    "title": "dplyr",
    "section": "",
    "text": "Run this code to get example data\n\nset.seed(1)\nA &lt;- tibble(id = c(1:5, 7:8),\n            sex = sample(c(\"Male\", \"Female\"), 7, replace = TRUE),\n            nr_of_orders = sample(5:10, 7, replace = TRUE))\nB &lt;- tibble(id = 1:6,\n            age = sample(25:75, 6),\n            total_order_value = sample(5:50, 6)*100)\n\n\n\n\n\n\nShow the code\nanti_join(A, B)\nanti_join(B, A)\n\n\n\n\n\n\n\nsemi_join(A, B)\n\n\n\n\n\n\n\nShow the code\nleft_join(A, B)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  arrange(id)\n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) \n\n\n\n\n\n\n\n\nShow the code\nfull_join(A,B) %&gt;% \n  mutate(\n    avg_order_value = total_order_value/nr_of_orders) %&gt;% \n  group_by(sex) %&gt;% \n  summarise(\n    mean_avg_order_value = mean(avg_order_value, na.rm = TRUE)\n  )"
  }
]