---
title: "Naming stuff"
author:
  - name: SÃ¸ren O'Neill
    url: www.oneill.dk
date: '`r Sys.Date()`'
output:
  distill::distill_article:
    self_contained: false
#collections:
#  posts:
#    disqus: reproducible-finance-with-r
#categories:
#  - Installation
creative_commons: CC BY
format: html
editor: source
---

```{r include=FALSE}
#library(vembedr)
library(tidyverse)
library(ggplot2)
library(DiagrammeR)
```


# Naming stuff

## Meaning

Let variable, function and file names convey _meaning_. 


```{r}
#| eval: false
#| echo: true
# 1 
d <- d %>% 
  mutate(s=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

# 2 
mData <- d %>% filter(s=="M")
```


**Suggest alternative code and variable names for this code**

## Meaning

Let variable, function and file names convey _meaning_. 


```{r eval=FALSE, echo=TRUE}
# 1 
data <- data %>% 
  mutate(sex=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

# 2 
data_males_only <- data %>% filter(sex=="M")
males_only_data <- data %>% filter(sex=="M")
```


## Making the meaning _even_ clearer...


```{r eval=FALSE, echo=TRUE}
data <- data %>% 
  mutate(sex=cpr2sex(id))
```


Alas, the function cpr2sex does not exist in base R or Tidyverse

::: {.callout-tip collapse="true"}


```{r}
#| eval: false
#| echo: true

# Requires a custom function like this -- which could be sourced from file

cpr2sex <- function(x) {
  # This function takes a string (x), presumed to be a valid Danish CPR
  # and return "F", "M" or NA depending on the last character in the string
  # If the last CPR character is an even number, it indicates female sex, and
  # an odd number indicates male sex.
  if (str_sub(x, str_length(x), str_length(x)) %in% c("0","2","4","6","8")) {
    return("F") 
  } else if (str_sub(x, str_length(x), str_length(x)) %in% c("1","3","5","7","9")) {
    return("M") 
  } 
  return(NA) # Last character in CPR is not a ciffre
}
```


We could hide this away in a separate file and '_source_' it .. or even make a new package...
:::

## Compound names

![](gfx/RR/var_name_animation.webp)

* **Do** use under_scores
* **Do not** use camelCase
* **Do not** use kebab-case

## Nouns and verbs


```{r echo=TRUE, eval=FALSE}
make_larger_by_10 <- function(x) {
  return(x+10)
}

ten_larger <- make_larger_by_10(112)

# For instance:
# selected_data <- data %>% select(..)
```



## Names

**Main points**

* Names should be meaningful
* Use under_scores, not CamelCase, nor kebab-case 
* Function names should be verbs
* Variable names should be nouns

<script src="https://giscus.app/client.js"
        data-repo="sorenoneill/r4phd"
        data-repo-id="R_kgDOJ9etDQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOJ9etDc4CYApF"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="0"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="cobalt"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>
