---
title: "Base R - data types"
author: "SÃ¸ren O'Neill"
date: today
output:
  distill::distill_article:
    self_contained: false
creative_commons: CC BY
format: html
editor: 
  mode: source
---

# Data types - why it matters

R is constructed to work with a number of _basic_ data types:

* logical : TRUE or FALSE
* integer : whole numbers
* numeric : decimal numbers
* complex : complex numbers 
* character : alphabetic and other characters
* raw : byte data

It is important to use the right data type for your data management and analyses.

**Note** The listed data types above are _basic_ data types and R offers many other combined and more complex data types.

It is also important to _know_ the type of the data you are working with, otherwise you may get confusing output. A common mistake is to load data from an external source (e.g. a .csv file) and _assume_ that variable _x_ was loaded as a character string, but actually it was loaded as a factor. If in doubt, check out `class()` and `str()` functions.

Consider the following code and resulting plot:

```{r}
#| echo: false
#| warning: false
require(ggplot2)
```


```{r}

ggplot(mpg, aes(x=year, y=hwy)) + geom_point()
```

Now look at the revised code below and the changes it made to the plot:

```{r}
ggplot(mpg, aes(x=factor(year), y=hwy)) + geom_point()
```

In the first instance, the variable 'year' is a continuous numeric variable. That was not immediately obvious to us, but you could have used `str(mpg)` or `class(mpg$year)` to find out. 

In the second instance, the column _year_ from the _mpg_ dataframe was converted into a categorical factor using the `factor()` function.

As you can see, this made quite a difference to the plot.

## Logical (or boolean)

Can assumes the values of either `TRUE` or `FALSE`.

**Note** That logical values can also be regarded as _integer_ values 1 and 0, corresponding to `TRUE` and `FALSE`.

Look at this code and its output:

```{r logical}
a <- TRUE
a + 3
```

## Integer

Integers are whole natural numbers: -1, 0, 1, 2, etc. 

R handles data type conversions for you if necessary. So, for instance:

```{r integer}
as.integer(3)/as.integer(2)
```

Dividing the integer 3 with the integer 2 yields a decimal number (1.5) -- R will handle such type conversions for you.

## Numeric

Numeric values are decimal points such as 2.33. In R, such numbers are stored as 64-bit values in computer memory, that means the limit for numeric values is 9,007,199,254,740,992. After than, R (and any other computer statistical program will run into trouble).

Most of the time, this limit does not affect us, but take a look at this code:

```{r numeric}
x <- 9007199254740992 + 1
y <- 1/3

format(x, scientific=FALSE)
y

```

:::{.callout-note collapse=false}
## Exercise # 1

1. Why did x not come 9007199254740993 (9007199254740992 + 1)?
2. Is 1/3 actually equal to 0.3333333?
:::

:::{.callout-note collapse=true}
## Exercise # 1 Solution

1. 9007199254740992 is the largest integer R can store as a single value on a 64-bit computer. Adding one exceeds this limit. 
2. No, 1/3 is 0.33333333333333333333..[into infinity] -- R can not store that many digits
:::

## Complex

Complex numbers are implimented with the `complex()` function. Not really relevant for most statistical analyses.

## Character

Use for storing alpha-numerical characters, i.e. letters of the alphabet, special characters like '?', '*', etc.

## Raw

The raw data type holds raw byte data, i.e. binary numbers of length 8-bits. Not really relevant for most statistical analyses.

<script src="https://giscus.app/client.js"
        data-repo="sorenoneill/r4phd"
        data-repo-id="R_kgDOJ9etDQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOJ9etDc4CYApF"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="0"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="cobalt"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>