---
title: "Inspect your data"
description: |
  Making sure your data is what you think it is
author:
  - name: SÃ¸ren O'Neill
    url: www.oneill.dk
date: "2023-11-26"
#output:
#  distill::distill_article:
#    self_contained: false
#collections:
#  posts:
#    disqus: reproducible-finance-with-r
categories:
  - RStudio
  - Inspection
creative_commons: CC BY
format: html
editor: source
number-sections: true
---

-------

```{r}
#| echo: false
#| warning: false
library(tidyverse)
df <- data.frame(id=1:5, age=c(23,43,32,NA,43), department=as.character(c("Management", "Marketing", "Accounting", "Public relations", "Accounting")))
df$passport_stamps <- list(c("Norway","Netherlands"), c(), c("Uruguay","Mexico","Canada"), c("India"), c("Kenya", "Botswana"))
```


Many new R users (and quite a few experienced ones, too) have spent a lot of time scratching their heads, because they _thought_ they knew how their data was structured, only to find it was not.

It is a very good idea, once data has been loaded into memory, to spend a little time inspecting it more carefully.

# Data structure

## Names

The function `names()` provides the names of the variables in an R data.frame. For instance, on this page, we make us of a simple data frame called 'df':

```{r}
names(df)
```

The `names()` tells us that 'df' contains four columns called 'id', 'age', etc.

## Structure

R also provides the function `str()` which details the structure of a variable. An example output of the `str()` function can look like this:


```{r}
str(df)
```

This output is somewhat more comprehensive and tells us that the variable 'df' is a data frame consisting of 5 observations (rows) of 4 variables (columns).

Furthermore, we can see the data type and the first actual data points for each column -- e.g. 'id' is of type 'int' (integer).

Perhaps, we expected the variable 'department' to be a factor rather than a type character. Let's fix that:

```{r}
df <- df |> mutate(department = as.factor(department))
str(df)
```

Notice, that the 'department' is now of type 'Factor' with 4 levels.

Also notice the column 'passport_stamps' which is of type 'list'.

# Data content

## Inspect the head of the data

The function `head()` simply lists the first 6 observations in a data frame or a vector. This is useful to get a first quick impression of the data at hand. The number of lines displayed can be specified in the function call, e.g. `head(data, n=10)`.

## Look for missing values

The function `is.na()` tests whether a given value is NA and returns TRUE or FALSE. If a data frame is passed to `is.na()` it will return a data frame of similar size with each cell being TRUE or FALSE. Look at this simple example

```{r}
df2<-data.frame(c1=1:5, c2=sample(LETTERS[1:24],5,TRUE), c3=letters[1:5]) 
df2[3,3]<-NA
df2
```

We can now use the `is.na()` function to look for NA values:

```{r}
is.na(df2)
```

If the data frame is large and difficult to get a good overview of, we could also check for the presence of _any_ NA's and their location:

```{r}
is.na(df2) |> sum()
```

The code above works like this: the boolean values TRUE and FALSE will be regarded as integers 1 and 0 in any function that takes numerical input -- thus the `sum()` function will add all the FALSE (0) and TRUE (1) values in the data frame and the result thus represents the number of observed NAs.

If you were interested in finding the row and column of NA values, you could do it like so:

```{r}
which(is.na(df2) , arr.ind=TRUE)
```

..or perhaps, if you want to check for NAs on a per-column basis:

```{r}
df2 |> summarise(across(c1:c3, ~ sum(is.na(.x))))
```

## Look at value ranges

Let us return to the data frame 'df' and look at the column 'age'.

```{r}
summary(df$age)
```

The function `summary()` gives us some summary statistics for the variable 'age', including the minimum and maximum values. 

Similarly, look at the output of `summary()` for the 'department' variable, which was a factor:

```{r}
summary(df$department)
```

# Manually cleaning data

If you find, that you data is not structured correctly (e.g. a variable is cast as a character, but should be a factor), has unexpected NA values or has some other issues with data values: **You should write R code to clean and restructure the data -- do not edit the raw data.**

That way, the data cleaning remains transparent and reversible.

<script src="https://giscus.app/client.js"
        data-repo="sorenoneill/r4phd"
        data-repo-id="R_kgDOJ9etDQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOJ9etDc4CYApF"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="0"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="cobalt"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>
