---
title: "Basics of RRR"
description: |
  Basics of Reproducible Research with R (and RStudio).
author:
  - name: Søren O'Neill
    url: www.oneill.dk
date: '`r Sys.Date()`'
output:
  distill::distill_article:
    self_contained: false
#collections:
#  posts:
#    disqus: reproducible-finance-with-r
#categories:
#  - Installation
creative_commons: CC BY
format: html
editor: source
---

```{r include=FALSE}
#library(vembedr)
library(tidyverse)
library(ggplot2)
library(DiagrammeR)
```

# Basics of Reproducible Research with R

<!-- -->

## Comments in R code and Quarto MarkDown

One of the core ideas of R and Quarto MarkDown is to make the code _human readable_ -- a concept known as literal programming. R+Quarto code is certainly more readable than classic programming languages, **but** it is unlikely that you are able to write code that is entirely self-explanatory to a human reader ... you _will_ need to add comments for future readers (yourself!) to understand the code.

**R code**

In R code, you can add a comment using the hashtag \#, like this:

```{r}
#| echo: true
#| eval: false
# This is a single-line comment in R code
# ...and there are no multi-line comments: You must add an # for each line
x <- 2 + 2 # ...but inline comments are okay

```

**Quarto** 

```{md}
#| echo: true
#| eval: false
<!-- This is a single-line comment in markdown -->
<!--
This is a multi-line 
comment in markdown
-->
..and inline <!-- comments are okay too -->
```

::: {.callout-note collapse=true}
## Note! ... the hashtag # has different meaning in R code and in quarto code!

As you have just seen, the hashtag \# is used to add comments in R code, but in quarto markdown, the hashtag \# is used to add level 1 headings, like this:

```{md}
#| echo: true
#| eval: false

# This is a level 1 heading

## This is a level 2 heading
```
:::


## Where to put comments?

::: panel-tabset

#### Are these example R comments okay?

```{r}
#| eval: false
#| echo: true

# this is definitely okay
x <- 2 + 2

# ...but is the following okay?
tibble(x=1:10, y=2:11) %>% # ..Is this okay?
  filter(y>5 & # How about breaking in the middle..
  x != 9) # ..of a statement like 'filter'?
```


#### Check out the output...

```{r}
#|  eval: true
#|  echo: false
#|  warning: true
#|  error: true
#|  output: true

# this is definitely okay
x <- 2 + 2

# ...but is the following okay?
tibble(x=1:10, y=2:11) %>% # ..Is this okay?
  filter(y>5 & # How about breaking in the middle..
  x != 9) # ..of a statement like 'filter'?
```

#### Is it good practice

These comments were syntactically okay ... **BUT** did they make your code **easier** for humans to read?

:::

## Keep it simple!

```{r}
#| eval: false
#| echo: true
# Comment lines before the code
# can be multiple lines and does
# not disturb your reading of the
# code ... best practice!

x <- 2 + 2 # use inline comments sparringly
y <- x^2 - c(2, 5, 8, 10:14) # ..they are distracting!
```

## Meaningful comments

What comments would be relevant here?

::: panel-tabset

#### ?

**Suggest comments for this code... think 'what' and 'why'**

```{r eval=FALSE, echo=TRUE}
# 1
d <- read.csv("my_data_file.csv")

# 2
d <- d %>% filter(id != "241269-1212")

# 3
d <- d %>% 
  mutate(s=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

```


#### !

**Suggestions for meaningful comments**

```{r eval=FALSE, echo=TRUE}
# ?? comments necessary ??
d <- read.csv("my_data_file.csv")

# excluded as participant entered an invalid CPR number
d <- d %>% filter(id != "2321369-1212")

# set 's' to F(emale) or M(ale) depending on odd/even id number in CPR
d <- d %>% 
  mutate(s=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

```
::::

## Commenting your code

**Main points**

* **Always** comment your code
* Comments should explain your thinking : 'why'
* With good code the 'how' is self-evident
    - ..but if your code can not be self-evident: explain in comments

## Using white space

::: panel-tabset

* in the middle of text, multiple spaces = a single space 
* at the end of text space + new-line = 2x new-line

#### Markdown

```{}
#| echo: true
#| eval: false
In markdown, there's an important difference
between '_new-line_' and '_empty-line_'.

...white space matters!
```

#### Output

In markdown, there's an important difference
between '_new-line_' and '_empty-line_'.

...white space matters!

#### Good practice

* any number of spaces between words is equal to one space
* any number of empty lines between paragraphs is equal to one empty line
* use one space to seperate functions, operators, etc a%>%b vs a %>% b
* use empty line to indicate new paragraph

:::

**Hint** Check out _Soft wrap long lines_ in the _Code_ menu.

## Commenting your _project_

Maintain a README.md file in each project, _at the root level_

* A simple description of the project purpose (the 'why')
* People involved
* Data sources etc
* List most important components (data and files)

<hr>

Especially important for larger, more complex projects with many data sources, collaborators, etc

## README.md template {.smaller}

```{}
#| eval: false
#| echo: true
# Project title

A subtitle that describes your project, e.g., research question

## Motivation

Motivate your research question or business problem. Clearly explain which problem is solved.

## Method and results

First, introduce and motivate your chosen method, and explain how it contributes to solving the research 
question/business problem.

Second, summarize your results concisely. Make use of subheaders where appropriate.


## Repository overview

Provide an overview of the directory structure and files, for example:

├── README.md
├── data
│   ├── my_data.csv  # raw data from CPR register
│   ├── exp_data.csv # experimental data register
├── plots
│   ├── plot_1.png   # Boxplot of age
│   ├── plot_2.png   # Pi chart of sex
│   └── plot_3.png   # Bi-plot age vs measurement X
├── main.R           # all analyses in one place
└── manuscript1.Rmd  # for J of RR

## Running instructions

Explain to potential users how to run/replicate your workflow. If necessary, touch upon the required input 
data, which secret credentials are required (and how to obtain them), which software tools are needed 
to run the workflow (including links to the installation instructions), and how to run the workflow.

## More resources

Point interested users to any related literature and/or documentation.

## About

Explain who has contributed to the repository.
```

# Naming stuff

## Meaning

Let variable, function and file names convey _meaning_. 

```{r}
#| eval: false
#| echo: true
# 1 
d <- d %>% 
  mutate(s=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

# 2 
mData <- d %>% filter(s=="M")
```

**Suggest alternative code and variable names for this code**

## Meaning

Let variable, function and file names convey _meaning_. 

```{r eval=FALSE, echo=TRUE}
# 1 
data <- data %>% 
  mutate(sex=factor(c("M", "F"))[as.numeric(substr(id,nchar(id),nchar(id))) %% 2])

# 2 
data_males_only <- data %>% filter(sex=="M")
males_only_data <- data %>% filter(sex=="M")
```

## Making the meaning _even_ clearer...

```{r eval=FALSE, echo=TRUE}
data <- data %>% 
  mutate(sex=cpr2sex(id))
```

Alas, the function cpr2sex does not exist in base R or Tidyverse

::: {.callout-tip collapse="true"}

```{r}
#| eval: false
#| echo: true

# Requires a custom function like this -- which could be sourced from file

cpr2sex <- function(x) {
  # This function takes a string (x), presumed to be a valid Danish CPR
  # and return "F", "M" or NA depending on the last character in the string
  # If the last CPR character is an even number, it indicates female sex, and
  # an odd number indicates male sex.
  if (str_sub(x, str_length(x), str_length(x)) %in% c("0","2","4","6","8")) {
    return("F") 
  } else if (str_sub(x, str_length(x), str_length(x)) %in% c("1","3","5","7","9")) {
    return("M") 
  } 
  return(NA) # Last character in CPR is not a ciffre
}
```

We could hide this away in a separate file and '_source_' it .. or even make a new package...
:::

## Compound names

![](gfx/var_name_animation.webp)

* **Do** use under_scores
* **Do not** use camelCase
* **Do not** use kebab-case

## Nouns and verbs

```{r echo=TRUE, eval=FALSE}
make_larger_by_10 <- function(x) {
  return(x+10)
}

ten_larger <- make_larger_by_10(112)

# For instance:
# selected_data <- data %>% select(..)
```


## Names

**Main points**

* Names should be meaningful
* Use under_scores, not CamelCase, nor kebab-case 
* Function names should be verbs
* Variable names should be nouns

# Files and folders

<!-- -->

## The _root_ 

### One root folder for each project

Should contain

* RStudio project (_\*.RProj_)
* README.md
* sessionInfo.txt
* Your _main_ R scripts
* Your RMarkdown and quarto scripts
* Relevant subfolders (/custom_functions, /gfx, /data, etc)

## <!-- -->

![](gfx/phdcomics.1531.png){height=90%}

## Files and folders

### Make and use your own folder/sub-folder template for new projects

![](gfx/file_structure.png){height=100%}

## File types

* Text always preferable to binary files
* Markup files (HTML, XML, etc) are human readable, but can be complex
* Application files (.odt, .docx) are often either binary files or very complex markup files

gfx/prefer_text_files.pdf

gfx/prefer_text_files.pdf

gfx/prefer_text_files.xml


## File types

**Stick to simple, human-readable files like R-scripts, markdown, csv files, etc, as far into the process as you can and only generate pdf, word, tiff, jpeg etc files as the final step.**

If any characters look weird in a simple txt file (it _does_ happen) -- it's probably the character encoding -- just stick to UTF8/UTF16

>- _By the way_, what do you think the first thing the typesetters at Springer does with your manuscript once accepted?

## Files and folders

**Main points**

* Use a strict folder structure you can handle -- make a template!
* Use relational folder paths if possible
* Use human-readable files only if possible (txt, md, Rmd, csv, etc)
* Only use non-human readable files for '_final output_' (pdf, docx, xlsx, etc)


<script src="https://giscus.app/client.js"
        data-repo="sorenoneill/r4phd"
        data-repo-id="R_kgDOJ9etDQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOJ9etDc4CYApF"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="0"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="cobalt"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>