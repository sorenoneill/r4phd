---
title: "dplyr"
subtitle: "+  here  and skimr"
date: today
output:
  distill::distill_article:
    self_contained: false
format: 
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 2
    code-fold: true
    code-summary: "Show the code"
    code-tools: true

execute:
  cache: true
  message: false
  warning: false
---

# The main functions of dplyr  

*  `select()`
*  `filter()`
*  `summarise()`
*  `group_by()` 
*  `arrange()`
*  `mutate()`
*  `count()`


<br><br><br><br><br><br><br><br>

## Getting started for now
### Load the `tidyverse` and the `here` package
```{r}
library(tidyverse)
library(here)
```

\ 

### Try out the `here()` function
* What happens if you write `here()` ? 
* What happens if you write `here("raw_data")` ?  
* Compare your output with your neighbors and discuss if and how the `here()`function could ever be of any use to anybody

\

### Load the soldiers dataset
Use the function `read_csv2()` \
The `file` argument should be `here("raw_data", "soldiers.csv")` 
```{r}
#| eval: false
read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Assign the soldiers dataset to an object
Great, now read the data again and assign it (remember `<-`) to an object called `soldiers`

```{r}
soldiers <- read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Explore the `soldiers` dataset
The `skim()` function from the `skimr`package provides an exellent overview
Load the `skimr` package and use the `skim()` function to get an impression of the `soldiers` dataset

Discuss with your neighbor:

* Nr of rows?
* Nr of columns?
* Missing values?
* Types of variables?
* Any fake data? *(hint: Yes, for educational purposes I have added some fake data)*

```{r}
#| eval: false
library(skimr)
skim(soldiers)
```

<br><br><br><br><br><br><br><br>

## `select()`

### select the columns `subjectid`, `sex`, `age`
```{r}
#| eval: false
soldiers %>% 
  select(subjectid, sex, age)
```

\

### select the columns 1, 3, 5:7

```{r}
#| eval: false
soldiers %>% 
  select(1,3,5:7)
```

\

### remove the columns 3:5

```{r}
#| eval: false
soldiers %>% 
  select(-(3:5))
```

\

### select all columns that contains the word "circumference"

<details><summary>**Hint**</summary>

**HINT**: Use one of the [tidyselect](https://tidyselect.r-lib.org/reference/language.html) helper functions.

</details>

```{r soldiers_6}
#| eval: false
soldiers %>% 
  select(contains("circumference"))
```

<br>

### remove all columns containing the letter "c"

<details><summary>**Hint**</summary>

**Hint** Use one of the [tidyselect](https://tidyselect.r-lib.org/reference/language.html) helper functions.  
**HINT**: Use a minus sign.  
</details>

```{r soldiers_7}
#| eval: false
soldiers %>% 
  select(-contains("c"))
```

<br>

### select all columns that contains a "c" OR "x" OR "y" OR "z"

<details><summary>**Hint**</summary>

**HINT**: In R(and many other programming languages) the \| sign is used as a logical operator for OR.

</details>

```{r}
#| eval: false
soldiers %>% 
  select(contains("c") | contains("x") | contains("y") | contains("z"))
```

<br>

### select all columns that contains a "c" OR "x" OR "y" OR "z"

This time use the [tidyselect](https://tidyselect.r-lib.org/reference/language.html) helper function called `matches()`\
`matches()` allows you to use logical operators inside the function. E.g., `matches("this|that")`

```{r soldiers_8}
#| eval: false
soldiers %>% 
  select(matches("c|x|y|z"))
```

<br>

### Challenge: Why not always use `matches()`?

Use the preloaded `iris` data-set. (just write `iris`)\
Try to use `matches()` to select all columns containing a "."

```{r}
#| eval: false
iris %>% 
  select(matches(".")) %>% 
  head() # This line is just there to prevent a very long output.
```

<br>

Why did we select the `Species` column?\
What happens if we use `contains()` instead

```{r}
#| eval: false
iris %>% 
  select(contains(".")) %>% 
  head() # This line is just there to prevent a very long output.
```

<br>

What is the difference in the output? Why is it different?

<details><summary>ANSWER</summary>

`contains()`: Contains a literal string.\
`matches()`: Matches a [regular expression](https://en.wikipedia.org/wiki/Regular_expression).\
In regular expressions `.` is a wildcard.

> The wildcard . matches any character. For example, a.b matches any string that contains an "a", and then any character and then "b"; and a.\*b matches any string that contains an "a", and then the character "b" at some later point.\
> [*https://en.wikipedia.org/wiki/Regular_expression*](https://en.wikipedia.org/wiki/Regular_expression){.uri}

</details>

<br><br><br><br><br><br><br><br>

## `filter()`

Restart R.\
Load the `tidyverse` and the `here` package

```{r}
library(tidyverse)
library(here)
```
\
Load the `soldiers `data and assign it to an object called `soldiers`
```{r}
soldiers <- read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Keep all rows where `sex` is Female:

<details><summary>HINT</summary>
`???? == "Female"`
</details>

```{r}
#| eval: false
soldiers %>% filter(sex == "Female")
```

<br>

### Keep all rows where `weightkg` is missing (NA value)

<details><summary>HINT</summary>
**HINT:** use the `is.na()` function
</details>

```{r}
#| eval: false
soldiers %>% 
  filter(is.na(weightkg))
```

<br>

### Keep all rows where `WritingPreference` is "Left hand" AND `sex` is "Female"

```{r}
#| eval: false
soldiers %>% 
  filter(WritingPreference == "Left hand" ,  sex == "Female")  # you can use & instead of a ,
```

<br>

### Keep all rows where `WritingPreference` is "Left hand" OR `sex` is "Female"

```{r}
#| eval: false
soldiers %>% 
  filter(WritingPreference == "Left hand" |  sex == "Female")  
```

<br>

### What is going wrong in this code?

```{r}
#| eval: false
#| code-fold: false
soldiers %>% 
  select(1:5) %>% 
  filter(WritingPreference == "Left hand" |  sex == "Female")  
```

```{r}
#| eval: false
#| code-fold: false
The error message is:
Error in `filter()`:
â„¹ In argument: `WritingPreference == "Left hand" | sex == "Female"`.
Caused by error:
! object 'WritingPreference' not found
Run `rlang::last_error()` to see where the error occurred.
```

```{r}
#| eval: false
#| code-summary: "ANSWER"
The variable WritingPreference was not selected in the first line.
```


<br>


### Keep all rows where `age` is above 30 and the `weightkg` is below 600
```{r}
#| eval: false
soldiers %>% 
  filter(age > 30, weightkg < 600)
```

\

### Keep all rows where `Ethnicity` is either "Mexican" OR "Filipino"

<details><summary>HINT</summary>
you need to use `%in%` and `c()`
</details>

```{r}
#| eval: false
soldiers %>% 
  filter(Ethnicity %in% c("Mexican", "Filipino"))
```

<br><br><br><br><br><br><br><br>

## `summarise()`

Restart R.\
Load the `tidyverse` and the `here` package

```{r}
library(tidyverse)
library(here)
```
\
Load the `soldiers `data and assign it to an object called `soldiers`
```{r}
soldiers <- read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Calculate the mean and standard deviation of `footlength`

```{r}
#| eval: false
soldiers %>% summarise(
  footlength_avg = mean(footlength),
  footlength_sd = sd(footlength))
```

<br>

### Calculate the median and interquartile range of `earlength`

<details><summary>HINT</summary>
use the `IQR()` function
</details>

```{r}
#| eval: false
soldiers %>% 
  summarise(
    earlength_median = median(earlength),
    earlength_iqr = IQR(earlength))
```

<br>

### Count the number of rows where `WritingPreference` is equal to "Right hand"

```{r}
#| eval: false
soldiers %>%  
  summarise(
    n_righthanded = sum(WritingPreference == "Right hand"))
```

\

### How old is the oldest soldier?
<details>

<summary>

HINT if you can't work out why get an `NA` value

</summary>

Many Base R functions, including `mean()`, does not ignore NA values by default. This means that if the vector contains an `NA` value the result will be `NA`. Is this a good or bad thing?\
You can set the argument `na.rm = TRUE`, to ignore missing values.

</details>

```{r}
#| eval: false
soldiers %>% 
  summarise(
    age_max = max(age, na.rm = TRUE))
```

\

### Calculate the mean weight of the Females

<details>

<summary>

HINT if you can't work out why get an `NA` value

</summary>

Many Base R functions, including `mean()`, does not ignore NA values by default. This means that if the vector contains an `NA` value the result will be `NA`. Is this a good or bad thing?\
You can set the argument `na.rm = TRUE`, to ignore missing values.

</details>

```{r}
#| eval: false
soldiers %>% 
  filter(sex == "Female") %>% 
  summarise(
    weight_avg = mean(weightkg, na.rm = TRUE))
```

<br>

### Calculate the range in weight (max-min) within Males

```{r}
#| eval: false
soldiers %>% 
  filter(sex == "Male") %>% 
  summarise(
    weight_range = max(weightkg, na.rm = TRUE)-min(weightkg, na.rm = TRUE))
```


<br><br><br><br><br><br><br><br>

## `group_by()` and `arrange()`

Restart R.\
Load the `tidyverse` and the `here` package

```{r}
library(tidyverse)
library(here)
```
\
Load the `soldiers `data and assign it to an object called `soldiers`
```{r}
soldiers <- read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Calculate the mean and sd of `weightkg` and `age` for all `Installation`s

```{r}
#| eval: false
soldiers %>% 
  group_by(Installation) %>% 
  summarise(weight_avg = mean(weightkg, na.rm = TRUE),
            weight_sd = sd(weightkg, na.rm = TRUE),
            age_avg = mean(age, na.rm = TRUE),
            age_sd = sd(age, na.rm = TRUE))
```

<br>

### Calculate the mean and sd of `weightkg` and `age` for all `Installation`s for both `sex`es

```{r}
#| eval: false
soldiers %>% 
  group_by(Installation, sex) %>% 
  summarise(weight_avg = mean(weightkg, na.rm = TRUE),
            weight_sd = sd(weightkg, na.rm = TRUE),
            age_avg = mean(age, na.rm = TRUE),
            age_sd = sd(age, na.rm = TRUE))
```

<br>

### Calcualate the average height for each `Installation` and count the number of missing values within each `Installation`

<details>

<summary>

HINT

</summary>

Use the functions `sum()` and `is.na()`

</details>

```{r}
#| eval: false
soldiers %>% 
  group_by(Installation) %>% 
  summarise(height_avg = mean(Heightin, na.rm = TRUE),
            height_n_miss = sum(is.na(Heightin)))
```

<br>

### As before, but now also add the number of observations (rows) within each `Installation`

<details>

<summary>

HINT

</summary>

Use `n()`

</details>

```{r}
#| eval: false
soldiers %>% 
  group_by(Installation) %>% 
  summarise(height_avg = mean(Heightin, na.rm = TRUE),
            height_n_miss = sum(is.na(Heightin)),
            n = n())
```

<br>

### As before, but now arrange the output after number of soldiers at each `Installation` in descending order.

```{r}
#| eval: false
soldiers %>% 
  group_by(Installation) %>% 
  summarise(height_avg = mean(Heightin, na.rm = TRUE),
            height_n_miss = sum(is.na(Heightin)),
            n = n()) %>% 
  arrange(desc(n))
```

<br><br><br><br><br><br><br><br>

## `mutate()`

Restart R.\
Load the `tidyverse` and the `here` package

```{r}
library(tidyverse)
library(here)
```
\
Load the `soldiers `data and assign it to an object called `soldiers`
```{r}
soldiers <- read_csv2(here("raw_data", "soldiers.csv"))
```

\

### Add a column called `heightcm` with the height of the soldiers in cm
* Update the `soldiers` dataset to with the new variable
* place the new variable after `Heightin`
```{r}
#| output: false
soldiers <- soldiers %>% 
  mutate(
    heightcm = Heightin * 2.54,
    .after = Heightin)
```

\

### Update the `weightkg` column to kg instead of kg*10
* Update the `soldiers` dataset to with the new variable
* place the new variable after `weightkg`
```{r}
#| output: false
soldiers <- soldiers %>% 
  mutate(
    weightkg = weightkg/10,
    .after = weightkg)
```

\

### Add a column called `BMI` with the Body mass index (BMI) of the soldiers
[BMI](https://en.wikipedia.org/wiki/Body_mass_index)
* Update the `soldiers` dataset to with the new variable
* place the new variable after `weightkg`
```{r}
#| output: false
soldiers <- soldiers %>% 
  mutate(BMI = weightkg/(heightcm/100)^2,
         .after = weightkg)
```

\

### Add a column called `obese` that contains the value TRUE if BMI is > 30
```{r}
#| eval: false
soldiers %>% 
  mutate(
    obese = if_else(BMI > 30, TRUE, FALSE),
    .before = 1 # This line code just places the variable at the front
  )
```

\

### Inspect the below table from [Wikipedia](https://en.wikipedia.org/wiki/Body_mass_index) {#sec-BMI}

```{r}
#| echo: false
tibble::tribble(                          ~Category, ~`BMI (kg/m^2^)`, 
    "Underweight (Severe thinness)",          "< 16.0", 
  "Underweight (Moderate thinness)",     "16.0 â€“ 16.9", 
      "Underweight (Mild thinness)",     "17.0 â€“ 18.4", 
                     "Normal range",     "18.5 â€“ 24.9", 
           "Overweight (Pre-obese)",     "25.0 â€“ 29.9", 
                  "Obese (Class I)",     "30.0 â€“ 34.9", 
                 "Obese (Class II)",     "35.0 â€“ 39.9", 
                "Obese (Class III)",          ">= 40.0", 
  ) %>%   knitr::kable()
```

\

### Create the variable `category` that tells us whether the soldiers are "Underweight", "Normal range", "Overweight", or "Obese"
* Update the `soldiers` dataset with the new variable
* place the new variable after `BMI`\

<details><summary>HINT 1</summary>
Use `case_when()`
</details>

<details><summary>HINT 2</summary>
Hint: See the code to get you started

```{r}
#| eval: false
#| code-fold: false
soldiers %>% 
  mutate(
    category = ????
    )
```
</details>

<details><summary>HINT 3</summary>
See more code to get you started

```{r}
#| eval: false
#| code-fold: false
soldiers %>% 
  mutate(
    category = case_when(
      #TEST HERE ~ OUTPUT, 
      #TEST HERE ~ OUTPUT,
      #TEST HERE ~ OUTPUT,
      #TRUE ~ OUTPUT
    )
    )
```

</details>

```{r}
#| output: false
soldiers <- soldiers %>% 
  mutate(
    category = case_when(
      BMI < 18.5 ~ "Underweight",
      BMI < 25   ~ "Normal range",
      BMI < 30   ~ "Overweight",
      BMI >= 30  ~ "Obese",
      TRUE ~ NA_character_),
    .after = BMI
    )
```

<br><br><br><br><br><br><br><br>

## `count()`

For simple counting `count()` is faster than `summarise(n = n())` or `mutate(n = n())`

<br><br>

#### What is this code equivalent to?
```{r}
#| eval: false
#| code-fold: false
diamonds %>% 
  count()
```

<details><summary>ANSWER</summary>
`count()` works like `summarise(n = n())`
</details>

<br><br>

#### What is this code equivalent to?
```{r}
#| eval: false
#| code-fold: false
diamonds %>% 
  count(cut)
```

<details><summary>ANSWER</summary>
`count(cut)` works like `group_by(cut) %>% summarise(n = n())`
</details>

<br><br>

#### What is this code equivalent to?
```{r}
#| eval: false
#| code-fold: false
diamonds %>% 
  count(cut, color)
```

<details><summary>ANSWER</summary>
`count(cut)` works like `group_by(cut, color) %>% summarise(n = n())`
</details>

<br><br>

#### What is this code equivalent to?
```{r}
#| eval: false
#| code-fold: false
diamonds %>% 
  add_count()
```

<details><summary>ANSWER</summary>
`add_count()` works like `mutate(n = n())`
</details>



